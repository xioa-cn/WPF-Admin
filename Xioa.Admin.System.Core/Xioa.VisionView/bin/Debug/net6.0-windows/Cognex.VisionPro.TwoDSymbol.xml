<?xml version="1.0"?><doc><assembly><name>Cognex.VisionPro.TwoDSymbol</name></assembly><members><member name="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotTrainedException"><summary>The exception that is thrown when the symbol was not trained. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained" /> is False.)</summary></member><member name="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotAvailableForSymbologyException"><summary>The exception that is thrown when the symbol is not a Data Matrix symbol. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Symbology" /> is not set to 'DataMatrix'.)</summary></member><member name="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotDecodedException"><summary>The exception that is thrown when the symbol was not decoded (<see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Decoded" /> is False).</summary></member><member name="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotFoundException"><summary>The exception that is thrown when the symbol was not found. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> is False.)</summary></member><member name="T:Cognex.VisionPro.Exceptions.Cog2DSymbolInvalidRowColumnException"><summary>The exception that is thrown when <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Symbology" /> is set to 'DataMatrix' and the DataMatrixAIMComplianceEnabled, DataMatrixRows, DataMatrixColumns, DataMatrixECCLevel properties do not constitute a valid combination for a DataMatrix symbol.</summary></member><member name="T:Cognex.VisionPro.Exceptions.Cog2DSymbolInvalidCodePageException"><summary>The exception that is thrown when the symbol tool cannot create the decoded string with the specified DecodedStringCodePage.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern"><summary>Class which holds a single 2D symbol pattern used for decoding a symbol within an image. Provides access to the training parameters, a method to train the pattern, results of training the pattern, and a method to execute a find and decode operation.</summary><remarks>This class is deprecated. Please use CogIDTool instead</remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfSymbology"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Symbology may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfOperatingMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatingMode may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDecodedStringCodePage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DecodedStringCodePage may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainImage may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainRegion may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainRegionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainRegionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainTimeoutEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainTimeoutEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainTimeout"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainTimeout may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNominalGrid"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NominalGrid may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfMirrorImageEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MirrorImageEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixRows"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DataMatrixRows may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixColumns"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DataMatrixColumns may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixECCLevel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DataMatrixECCLevel may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixAIMComplianceEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DataMatrixAIMComplianceEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainFlags"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainFlags may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeGridSize"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by QRCodeGridSize may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeModel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by QRCodeModel may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Trained may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainResult may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPerspectiveEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerspectiveEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNonConformantModulesEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NonConformantModulesEnabled may have changed.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainResult"><remarks><PARA>Returns the train result object generated by <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />. 
The <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult" /> object contains the results of decoding the
symbol as well as the parameters that will be used when the tool is used to decode symbols from other images.</PARA><NOTE><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainResult" /> generates a <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult" /> even when 
<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Trained" /> is False. In such cases, most of the parameters in the result object will not be
accessible. However,<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainResult" />.<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Result" /><ITALIC>is</ITALIC>
available and you can use its <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> and <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Decoded" /> properties to determine whether the symbol was found but not decoded.
</NOTE></remarks><summary>Returns the train result object generated by calling train.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_TrainRegionMode--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainRegionMode" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainRegion--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainRegion" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainRegionMode" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Trained"><remarks><PARA>Returns True if the pattern is trained. 
You cannot decode images unless the pattern is trained.</PARA><PARA>When the operating mode is <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">HighlyDegradedSymbols</see> and <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainFlags" /> is 
<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants">None</see>, the tool assumes that all
of the parameters are correct and immediately enters the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Trained" /> state.
</PARA></remarks><summary>Returns the trained state of the pattern. Images cannot be decoded until the pattern is trained.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.QRCodeModel"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The QR Code model is not in <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeModelConstants" />.</para></exception><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_QRCodeModel--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeModel" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainParams--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNominalGrid" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPolarity" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfMirrorImageEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixRows" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixColumns" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixECCLevel" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixAIMComplianceEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeGridSize" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeModel" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><summary>Sets or gets the model type used for the QR Code symbology.</summary><remarks><PARA>Sets or gets the <see cref="u:Identification.2DSymbol.Theory.ToolTheory" cgnxAnchor="model_type">model type</see> used for the QR Code symbology. Model refers to the version of the QR Code to be decoded. It may be either Model 1 (original) or Model 2 (enhanced), or MicroQR (reduced size).
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeModelConstants">Model1</see> (original)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.QRCodeGridSize"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The grid size is not in <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants" />.</para></exception><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_QRCodeGridSize--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeGridSize" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainParams--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNominalGrid" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPolarity" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfMirrorImageEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixRows" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixColumns" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixECCLevel" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixAIMComplianceEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeGridSize" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeModel" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><summary>Sets or gets the  grid size for the QR Code symbology.</summary><remarks><PARA>Sets or gets the grid size for the QR Code symbology. The QR Code symbol grid has the same number of rows and columns. </PARA><PARA>Sizes greater than 17 modules apply only to Model 1 and Model 2 codes. Sizes from 11 to 17 modules apply only to MicroQR code.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants">Size21</see> (21x21 symbol)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainFlags"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.OperatingMode" /> is
		<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">TypicalSymbols</see>
		and the flags are set to
		<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants">None</see>.
	</para></exception><summary>Sets or gets the train flags used to specify the parameters used to train the symbol.</summary><remarks><PARA>Sets or gets the training flags which specify the parameters that <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> learns automatically.
</PARA><PARA>This property is only meaningful when the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.OperatingMode" /> is

<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">HighlyDegradedSymbols</see>.

When the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.OperatingMode" /> is
<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">TypicalSymbols</see>,

the training flags are ignored, and <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> learns all of the parameters.
</PARA></remarks><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_TrainFlags--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainFlags" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainFlags--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainFlags" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixAIMComplianceEnabled"><remarks><PARA>Sets or gets the AIM compliance flag used for the Data Matrix symbology. For AIM-compliant symbols, the number of rows must be the same as the number of columns for the symbol grid for all versions except <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants">cog2DSymbolDataMatrixECCLevel200</see>.</PARA><PARA><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixAIMComplianceEnabled" /> and the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixECCLevel" /> affect the
valid <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixRows">row</see> and <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixColumns">column</see> combinations. If you specify an invalid combination,
<see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> will return an error.
</PARA><PARA><see cref="u:Identification.2DSymbol.Theory.ToolTheory" cgnxAnchor="valid_data_matrix_grid_sizes">The 2D Symbol tool theory topic</see> lists the valid combinations of AIM compliance, ECC level, rows and columns.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_DataMatrixAIMComplianceEnabled--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixAIMComplianceEnabled" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainParams--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNominalGrid" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPolarity" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfMirrorImageEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixRows" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixColumns" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixECCLevel" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixAIMComplianceEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeGridSize" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeModel" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><summary>Sets or gets the AIM compliance flag used for the Data Matrix symbology.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixECCLevel"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_DataMtrixECCLevel--><ul /></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainParams--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNominalGrid" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPolarity" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfMirrorImageEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixRows" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixColumns" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixECCLevel" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixAIMComplianceEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeGridSize" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeModel" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><remarks><PARA>Sets or gets the Data Matrix version specified by the ECC Level.</PARA><PARA><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixAIMComplianceEnabled" /> and the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixECCLevel" /> affect the valid <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixRows">row</see> and <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixColumns">column</see> combinations. If you specify an invalid combination, <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> will return an error.
</PARA><PARA><see cref="u:Identification.2DSymbol.Theory.ToolTheory" cgnxAnchor="valid_data_matrix_grid_sizes">The 2D Symbol tool theory topic</see> lists the valid combinations of AIM compliance, ECC level, rows and columns.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants">cog2DSymbolDataMatrixECCLevel200</see></DEFAULT></remarks><summary>Sets or gets the Data Matrix version specified by the ECC Level.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value specified is not in <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixColumns"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_DataMatrixColumns--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixColumns" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainParams--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNominalGrid" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPolarity" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfMirrorImageEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixRows" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixColumns" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixECCLevel" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixAIMComplianceEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeGridSize" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeModel" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><summary>Sets or gets the number of columns in the symbol grid for the Data Matrix symbology.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The number of columns is less than 9 or greater than 48.</para></exception><remarks><PARA>Sets or gets the number of columns in the symbol grid for the Data Matrix symbology.</PARA><PARA><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixAIMComplianceEnabled" /> and the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixECCLevel" /> affect the
valid <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixRows">row</see> and column combinations. If you specify an invalid combination,
<see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> will return an error.
</PARA><PARA><see cref="u:Identification.2DSymbol.Theory.ToolTheory" cgnxAnchor="valid_data_matrix_grid_sizes">The 2D Symbol tool theory topic</see> lists the valid combinations of AIM compliance, ECC level, rows and columns.</PARA><DEFAULT>48</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixRows"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_DataMatrixRows--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixRows" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainParams--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNominalGrid" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPolarity" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfMirrorImageEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixRows" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixColumns" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixECCLevel" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixAIMComplianceEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeGridSize" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeModel" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The number of rows is less than 8 or greater than 48.</para></exception><summary>Sets or gets the number of rows in the symbol grid for the Data Matrix symbology.</summary><remarks><PARA>Sets or gets the number of rows in the symbol grid for the Data Matrix symbology.</PARA><PARA><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixAIMComplianceEnabled" /> and the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixECCLevel" /> affect the
valid row and <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixColumns">column</see> combinations. If you specify an invalid combination,
<see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> will return an error.
</PARA><PARA><see cref="u:Identification.2DSymbol.Theory.ToolTheory" cgnxAnchor="valid_data_matrix_grid_sizes">The 2D Symbol theory topic</see> lists the valid combinations of AIM compliance, ECC level, rows and columns.</PARA><DEFAULT>16</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.MirrorImageEnabled"><remarks><PARA>Sets or gets the mirror image flag.
If True, the pattern will be mirrored (flipped left-to-right) before decoding.</PARA><PARA>If the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.OperatingMode" /> is
<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">TypicalSymbols</see> this parameter
is always learned during <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />, so setting this property has no effect.</PARA><DEFAULT>False</DEFAULT></remarks><summary>Sets or gets whether symbol will be mirrored before decoding.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_MirrorImageEnabled--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfMirrorImageEnabled" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainParams--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNominalGrid" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPolarity" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfMirrorImageEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixRows" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixColumns" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixECCLevel" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixAIMComplianceEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeGridSize" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeModel" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Polarity"><remarks><PARA>Sets or gets the symbol polarity which is either dark-on-light or light-on-dark.</PARA><PARA>If the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.OperatingMode" /> is
<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">TypicalSymbols</see> this parameter
is always learned during <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />, so setting this property has no effect.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPolarityConstants">DarkOnLight</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_Polarity--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPolarity" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainParams--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNominalGrid" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPolarity" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfMirrorImageEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixRows" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixColumns" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixECCLevel" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixAIMComplianceEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeGridSize" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeModel" /></li></ul></event><summary>Sets or gets the symbol polarity.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The polarity was not in <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPolarityConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.NominalGrid"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_NominalGrid--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNominalGrid" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainParams--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNominalGrid" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPolarity" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfMirrorImageEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixRows" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixColumns" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixECCLevel" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDataMatrixAIMComplianceEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeGridSize" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfQRCodeModel" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><summary>Sets or gets the nominal grid.</summary><remarks><PARA>Sets or gets the <see cref="u:Identification.2DSymbol.Theory.ToolTheory" cgnxAnchor="nominal_grid">nominal grid</see> which defines the dimensions and orientation of the symbol's finder pattern.</PARA><PARA>If the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.OperatingMode" /> is
<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">TypicalSymbols</see> this parameter
is always learned during <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />, so setting this property has no effect.</PARA><PARA>If the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.OperatingMode" /> is
<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">HighlyDegradedSymbols</see> you can set
 the  <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants">NominalGrid</see> flag with <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainFlags" /> to have the tool learn the nominal grid. This is often more accurate than specifying the nominal grid yourself.
</PARA><PARA>For Data Matrix symbols, the nominal grid should enclose the finder pattern of the symbol; its coordinate system should be a right-handed system with the origin in the lower left corner. For QR symbols, the nominal grid should overlay the center of the finder pattern; its coordinate system should be a rotated left-handed system with the origin in the upper right corner.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The affine rectangle was NULL.</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainTimeout"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_Timeout--><ul /></event><remarks><PARA>Sets or gets  the maximum time in milliseconds allowed for training.
The timeout period is used only when <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainTimeoutEnabled" /> is True.
</PARA><PARA>
If the tool has not finished training the symbol by the end of this timeout period, it will stop and return 
<see cref="T:Cognex.VisionPro.CogErrConstants">e_Cog_TimeoutExpired</see>.</PARA><NOTE>Due to internal latencies, this timeout value is an approximate upper limit.
The actual execution time can exceed the timeout value by up to 20 milliseconds
on a 200 MHz Pentium I. Latencies on faster CPUs are typically lower.</NOTE><DEFAULT>5000 milliseconds</DEFAULT></remarks><summary>Sets or gets the maximum execution time (msec) allowed to train.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The timeout period is less than zero.</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.NonConformantModulesEnabled"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed"><para>Fires when the property changes.</para><para>The following state flag may be affected:</para><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfNonConformantModulesEnabled" /></li></ul></event><summary>Sets or gets whether to consider non-confirming modules when training the pattern.</summary><remarks><para>
		Ideally, a 2D symbol is made up of square or round modules of a uniform color.
		However when the symbol is dot-peened on a 
		metal surface, the module may appear as an annulus whose center is the
		inverse of the color expected.
		Depending on the physical depth of the dots
		and the lighting of the metal surface,
		the appearance of the annulus can cause
		conventional decoding algorithms to fail.
		When this property is enabled,
		the tool takes extra processing steps to
		train these kinds of symbols.
	</para><para>
		This property is respected only when the
		<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Symbology" />
		is
		<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">DataMatrix</see>.
    	</para><para>
		Enabling this property may increase the
		amount of time needed to train or decode
		degraded symbols even if the image
		has no distortion.
		For best performance, enable this property
		only when you know that the the symbol
		image has modules that appear as annuli.
	</para></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.PerspectiveEnabled"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed"><para>Fires when the property changes.</para><para>The following state flag may be affected:</para><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfPerspectiveEnabled" /></li></ul></event><summary>Sets or gets whether to consider perspective distortion for symbol training.</summary><remarks><para>
    			When this property is True,
    			you can train and decode symbols that 
    			show perspective distortion.
    		</para><para>
    			Enabling this property may increase the
    			amount of time needed to train or decode
    			degraded symbols even if the image
    			has no distortion.
    			For best performance, enable this property
    			only when you know that the the symbol
    			image has perspective distortion.
    		</para></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainTimeoutEnabled"><remarks><PARA>Sets or gets whether to use the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainTimeout" /> property that limits the training time of the tool.
If <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainTimeoutEnabled" /> is False, timeout is disabled and the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainTimeout" /> property is ignored.</PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_TrainTimeoutEnabled--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainTimeoutEnabled" /></li></ul></event><summary>Sets or gets whether the TrainTimeout property is to be used for training.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegionMode"><summary>Sets or gets the region mode that specifies how the TrainRegion is applied to the TrainImage.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_TrainRegionMode--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainRegionMode" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainRegion--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainRegion" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainRegionMode" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The region mode is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><remarks><PARA>Sets or gets the region mode that specifies how the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegion" /> is applied to the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage" />.</PARA><PARA>The region mode must be either <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
</PARA><NOTE>Changing the region mode causes this <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern" /> to become untrained.</NOTE><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegion"><summary>Sets or gets the region of interest in the TrainImage used to train the pattern.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_TrainRegion--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainRegion" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainRegion--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainRegion" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainRegionMode" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><remarks><PARA>Sets or gets the region of interest in the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage" /> used to train the pattern.
The <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegionMode" /> property specifies how the region is applied to the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage" /></PARA><PARA>
An empty (NULL) <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegion" /> means that the entire <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage" /> will be used to train the pattern.</PARA><NOTE>Changing the region causes this <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern" /> to become untrained.</NOTE><DEFAULT>NULL (no region)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_TrainImage--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainImage" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainImage--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainImage" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><remarks><PARA>Sets or gets the image that contains the symbol used to train the pattern.
The <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegion" /> is applied to this <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage" /> in order to define the region used to train the pattern. The <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegionMode" /> specifies how the region is applied to this image.</PARA><PARA>
This property is stored as a reference to the supplied image. If you change the value of this property, this <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern" /> becomes untrained, but if you change the pixels in the <see cref="T:Cognex.VisionPro.CogImage8Grey" /> that this property refers to, it is not untrained. 
</PARA><NOTE>Changing this property causes this <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern" /> to become untrained.</NOTE><DEFAULT>NULL (no image)</DEFAULT></remarks><summary>Sets or gets the image that contains the symbol used to train the pattern.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DecodedStringCodePage"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_DecodedStringCodePage--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfDecodedStringCodePage" /></li></ul></event><remarks><PARA>Sets or gets the Code Page (character set) used to generate the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.DecodedString" /> property in the <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult" /> object after <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> the pattern or <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams)">running</see> the tool.
</PARA><PARA>Applications whose data consists of ASCII characters should use the <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCodePageConstants">ANSILatin1</see>, ANSI (Latin 1) Code Page, setting which corresponds to the ISO 8859-1 character set.
QR symbols that encode
Japanese characters should use <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCodePageConstants">Japanese</see>.
</PARA><PARA><NOTE>Although <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCodePageConstants" /> provides constants for ANSI and Japanese
character sets, you can use any code page that Windows supports.</NOTE></PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCodePageConstants">ANSILatin1</see></DEFAULT></remarks><summary>Sets or gets the Code Page (character set) that will be used to create the decoded string</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.OperatingMode"><remarks><PARA>Sets or gets the <see cref="u:Identification.2DSymbol.Theory.ToolTheory" cgnxAnchor="specifying_the_operating_mode">operating mode</see> that will be used to train and decode images.</PARA><PARA>Always try to use the Typical Symbols (<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">TypicalSymbols</see>) operating mode first. Use the Highly Degraded Symbols 
(<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">HighlyDegradedSymbols</see>)
operating mode only if you cannot use the Typical Symbols operating mode. When you use the Typical Symbols operating mode, the tool learns the best values for all the training parameters. In the Highly Degraded Symbols operating mode, you can have the tool <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainFlags">learn</see> some of the parameters, but you must specify the others.
</PARA><PARA>When the operating mode is <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">HighlyDegradedSymbols</see> and <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainFlags" /> is 
<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants">None</see>, the tool assumes that all
of the parameters are correct and immediately enters the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Trained" /> state.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants">TypicalSymbols</see></DEFAULT></remarks><summary>Sets or gets the operating mode that will be used to train and decode images.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_OperatingMode--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfOperatingMode" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_OperatingMode--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfOperatingMode" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The operating mode was not in <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Symbology"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes and the pattern is not trained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolPattern_Symbology--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfSymbology" /></li></ul></event><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and the pattern is trained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_Symbology--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfSymbology" /></li><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The symbology is not in <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants" />.</para></exception><summary>Sets or gets symbology (Data Matrix or QR Code) that will be used to train and decode images.</summary><remarks><PARA>Sets or gets the <see cref="u:Identification.2DSymbol.Theory.ToolTheory" cgnxAnchor="symbologies_supported_by_the_2d_symbol_tool">symbology</see> (Data Matrix or QR Code) that will be used to train and decode images.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">DataMatrix</see> (DataMatrix)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train"><remarks><PARA>Trains this 2D Symbol pattern. If the pattern is already trained then it will be untrained and retrained.</PARA><PARA>If the training was successful, <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Trained" /> is True
and the tool generates a <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainResult" /> object that contains
the training parameters that were learned (if you were in the Typical Symbols <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.OperatingMode">operating mode</see>).

</PARA><PARA>
If you were in in Highly Degraded Symbols operating mode, the training parameters are determined as follows:
</PARA><PARA>
 If <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainFlags" />
 is 
 <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants.None" />,
  then the specified parameters are used in training. 
 If the training image can be decoded using the supplied parameters, 
 <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Trained" /> is set to true.
</PARA><PARA>
If <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainFlags" />
is set to anything other than
 <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants.None" />,
then the pattern attempts to learn all of the parameters (including the ones that you supply). 
If the training image can be decoded using the learned parameters, then 
 <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Trained" /> is set to true.
If the training image cannot be decoded, 
the tool attempts to learn only the parameters that you specify to be learned, then uses those learned parameters plus the parameters that you supply. 
If the training image can be decoded using this combination of learned and supplied parameters, then
 <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Trained" /> is set to true.
</PARA><PARA>
See <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainFlags" /> for additional information
about learning training parameters.
</PARA><PARA>
The <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainResult" /> object also includes the typical results of finding and decoding a symbol.
</PARA></remarks><summary>Trains this 2D Symbol pattern. If the pattern is already trained then it will be untrained and retrained.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
Fires after <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern" /> executes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoTrainImageException" cgnxHRESULT="E_CogOperator_NoTrainImage"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of the  <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegion" /> is not a valid space of the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para> The selected space name of the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegion" /> is a nonqualified space name and more than one instance of it exists in the space tree of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegion" /> is not a legal space name. </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegion" /> falls  completely outside of the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage" />.  Clipping of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegion" /> is allowed.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see>, but <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegion" /> is not an <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException" cgnxHRESULT="E_Cog_TimeoutExpired"><para>The <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainTimeout" /> period expired and <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainTimeoutEnabled" /> is True.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolInvalidCodePageException" cgnxHRESULT="E_Cog2DSymbol_InvalidCodePage"><para>The tool cannot create the decoded string with the specified <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DecodedStringCodePage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolInvalidRowColumnException" cgnxHRESULT="E_Cog2DSymbol_InvalidRowColumn"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Symbology" /> is
	<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">DataMatrix</see>
	and the 
	<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixAIMComplianceEnabled" />, <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixRows" />, <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixColumns" />,
	and <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixECCLevel" />  properties do not constitute  a valid combination
	for a DataMatrix symbol.</para></exception></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Untrain"><remarks><PARA>Untrains this pattern. Any training data is released.</PARA><PARA><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Untrain" /> has no effect if the pattern is not trained.</PARA></remarks><summary>Untrains this pattern.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed" cgnxEvent="multiState"><para>
		
If the pattern was trained, fires when the pattern is untrained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_2DSymbolPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.SfTrainResult" /></li></ul></event></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams)"><param name="inputImage"><PARA>The image that contains the symbol to decode.</PARA></param><param name="searchRegion"><PARA>The region of <paramref name="Image" /> that contains the symbol to decode. If <paramref name="searchRegion" /> is Nothing, <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams)" /> uses the entire <paramref name="Image" />.</PARA></param><param name="runParams"><PARA>The <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams" /> that contains the parameters for decoding the symbol.</PARA></param><returns><PARA>The result object that contains the decoded string.</PARA></returns><summary>Runs this 2D symbol pattern on the given region/image with the given runtime parameters.</summary><remarks><PARA>Search for this pattern in the specified <paramref name="searchRegion" /> of <paramref name="Image" /> with the
given <paramref name="runParams" />.
</PARA><PARA>The returned <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult" /> contains the decoded string and other attributes.
</PARA><PARA>When <paramref name="runParams" />.<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.TrainAndDecodeEnabled" /> is True,
<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainImage" /> will be set to <paramref name="Image" />,
<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegion" /> will be set to <paramref name="searchRegion" />, 
and <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainRegionMode" /> will be set to <paramref name="runParams" />.<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SearchRegionMode" />. Then <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams)" /> calls <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> to generate the result.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="Image" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="Image" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException" cgnxHRESULT="E_CogOperator_NotTrained"><para>The pattern is not trained.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <paramref name="searchRegion" /> is not a valid space of <paramref name="Image" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <paramref name="searchRegion" /> is a nonqualified space name and more than one instance of it exists in the space tree of <paramref name="Image" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <paramref name="searchRegion" /> is not a legal space name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="searchRegion" /> falls completely outside of <paramref name="Image" />. Clipping of <paramref name="searchRegion" /> is allowed.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="runParams" />.<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SearchRegionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see>, but <paramref name="searchRegion" /> is not an <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="runParams" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolInvalidCodePageException" cgnxHRESULT="E_Cog2DSymbol_InvalidCodePage"><para>The <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.DecodedString" /> cannot be constructed with the specified <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.DecodedStringCodePage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException" cgnxHRESULT="E_Cog_TimeoutExpired"><para>The <paramref name="runParams" />.<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Timeout" /> period expired.</para></exception></member><member name="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult"><summary>The result generated by calling Cog2DSymbolPattern::Train. It includes the parameters that will be used by the pattern to decode symbols from other images. It also includes the result of decoding the symbol on the TrainImage.</summary><remarks>this class is deprecated. Please use CogIDTool instead</remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Result"><remarks><PARA>Returns the <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult" /> that was generated during <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />. The result object includes the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.DecodedString" /> from training as well as other properties of the symbol found.</PARA></remarks><summary>Returns the decode result object that was generated by calling train. Includes the decoded symbol from training as well as other properties of the found symbol.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.QRCodeModel"><summary>Returns the model used for the QR Code symbology as a result of calling train.</summary><remarks><PARA>Returns the model of the QR Code symbol detected as a result of <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />.</PARA><PARA>The value returned is one of the  <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeModelConstants" />.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotTrainedException" cgnxHRESULT="E_Cog2DSymbol_NotTrained"><para>The symbol was not trained. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained" /> is False.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotAvailableForSymbologyException" cgnxHRESULT="E_Cog2DSymbol_NotAvailableForSymbology"><para>The symbol is not a QR Code symbol. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Symbology" /> is not <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">QRCode</see>.)</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.QRCodeGridSize"><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotTrainedException" cgnxHRESULT="E_Cog2DSymbol_NotTrained"><para>The symbol was not trained. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained" /> is False.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotAvailableForSymbologyException" cgnxHRESULT="E_Cog2DSymbol_NotAvailableForSymbology"><para>The symbol is not a QR Code symbol. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Symbology" /> is not <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">QRCode</see>.)</para></exception><remarks><PARA>Returns the grid size of the QR Code symbol detected as a result of <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />.</PARA><PARA>QR Code symbols are square, so the number of rows and columns is the same.</PARA></remarks><summary>Returns the grid size parameter for the QR Code symbology as a result of calling train.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.DataMatrixAIMComplianceEnabled"><remarks><PARA>Returns the AIM compliance flag of the Data Matrix symbol detected as a result of <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />.</PARA></remarks><summary>Returns the AIM compliance flag used for the Data Matrix symbology as a result of calling train.</summary><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotTrainedException" cgnxHRESULT="E_Cog2DSymbol_NotTrained"><para>The symbol was not trained. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained" /> is False.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotAvailableForSymbologyException" cgnxHRESULT="E_Cog2DSymbol_NotAvailableForSymbology"><para>The symbol is not a Data Matrix symbol. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Symbology" /> is not <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">DataMatrix</see>.)</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.DataMatrixECCLevel"><remarks><PARA>Returns the ECC Level of the Data Matrix symbol detected as a result of <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />.</PARA></remarks><summary>Returns the ECC Level parameter used for the Data Matrix symbology as a result of calling train.</summary><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotTrainedException" cgnxHRESULT="E_Cog2DSymbol_NotTrained"><para>The symbol was not trained. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained" /> is False.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotAvailableForSymbologyException" cgnxHRESULT="E_Cog2DSymbol_NotAvailableForSymbology"><para>The symbol is not a Data Matrix symbol. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Symbology" /> is not <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">DataMatrix</see>.)</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.DataMatrixColumns"><remarks><PARA>Returns the number of columns in the Data Matrix symbol detected as a result of <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />.</PARA></remarks><summary>Returns the columns parameter for the Data Matrix symbology as a result of calling train.</summary><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotTrainedException" cgnxHRESULT="E_Cog2DSymbol_NotTrained"><para>The symbol was not trained. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained" /> is False.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotAvailableForSymbologyException" cgnxHRESULT="E_Cog2DSymbol_NotAvailableForSymbology"><para>The symbol is not a Data Matrix symbol. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Symbology" /> is not <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">DataMatrix</see>.)</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.DataMatrixRows"><summary>Returns the rows parameter for the Data Matrix symbology as a result of calling train.</summary><remarks><PARA>Returns the number of rows in the Data Matrix symbol detected as a result of <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotTrainedException" cgnxHRESULT="E_Cog2DSymbol_NotTrained"><para>The symbol was not trained. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained" /> is False.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotAvailableForSymbologyException" cgnxHRESULT="E_Cog2DSymbol_NotAvailableForSymbology"><para>The symbol is not a Data Matrix symbol. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Symbology" /> is not <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">DataMatrix</see>.)</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.MirrorImageEnabled"><remarks><PARA>Returns True if <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> detected that the symbol was mirrored.</PARA></remarks><summary>Returns the mirror image flag as a result of calling train.</summary><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotTrainedException" cgnxHRESULT="E_Cog2DSymbol_NotTrained"><para>The symbol was not trained. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained" /> is False.)</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Polarity"><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotTrainedException" cgnxHRESULT="E_Cog2DSymbol_NotTrained"><para>The symbol was not trained. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained" /> is False.)</para></exception><summary>Returns the symbol polarity (dark-on-light or light-on-dark) as a result of calling train.</summary><remarks><PARA>Returns the symbol polarity learned as a result of  <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" />.</PARA><PARA>The returned value is either <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPolarityConstants">DarkOnLight</see> or <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPolarityConstants">LightOnDark</see></PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained"><summary>Returns true if calling Train was successful at finding and decoding the symbol and training the tool. If false, only the Result object will be accessible, showing the result of the find and decode operation as a result of calling Train.</summary><remarks><PARA>Returns True if <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> succeeded in finding and decoding the symbol and training the tool.</PARA><PARA>If <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained" /> is False, only the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Result" /> object will be accessible.</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Symbology"><summary>Returns the Symbology (Data Matrix or QR Code) of this result. The Symbology determines which properties will be accessible in this object.</summary><remarks><PARA>Returns the symbology of this result.</PARA><PARA>The value can be either <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">DataMatrix</see> or
<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">QRCode</see></PARA></remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams"><remarks>this class is deprecated. Please use CogIDTool instead</remarks><summary>The object that stores parameters for 2D symbol decoding. It specifies necessary parameters for <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams)" /> to successfully find and decode a symbol.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SfTrainAndDecodeEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainAndDecodeEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SfSearchRegionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SearchRegionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SfTimeoutEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TimeoutEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SfTimeout"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Timeout may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SfPerspectiveMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerspectiveMode may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SfNonConformantModulesMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NonConformantModulesMode may have changed.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.NonConformantModulesMode"><summary>Sets or gets Sets or gets whether to consider non-confirming modules when decoding images.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Changed"><para>Fires when the property changes.</para><para>The following state flag may be affected:</para><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SfNonConformantModulesMode" /></li></ul></event><remarks><para>
		Ideally, a 2D symbol is made up of square or round modules of a uniform color.
		However when the symbol is dot-peened on a 
		metal surface, the module may appear as an annulus whose center is the
		inverse of the color expected.
		Depending on the physical depth of the dots
		and the lighting of the metal surface,
		the appearance of the annulus can cause
		conventional decoding algorithms to fail.
		When this property is
		set to
		<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolNonConformantModulesModeConstants">Enabled</see>
		or to
		<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolNonConformantModulesModeConstants">UsePattern</see>
		and the pattern was <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.NonConformantModulesEnabled">trained for non-conforming modules</see>
		the tool takes extra processing steps to
		decode these kinds of symbols.
	</para><para>
		This property is respected only when the
		<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Symbology" />
		is
		<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">DataMatrix</see>.
    	</para><para>
		Enabling this property may increase the
		amount of time needed to  decode
		degraded symbols even if the image
		has no distortion.
		For best performance, enable this property
		only when you know that the the symbol
		image has modules that appear as annuli.
	</para></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.PerspectiveMode"><summary>Sets or gets whether to consider perspective distortion when decoding images.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Changed"><para>Fires when the property changes.</para><para>The following state flag may be affected:</para><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SfPerspectiveMode" /></li></ul></event><remarks><para>
    			When this property is True,
    			you can decode symbols that 
    			show perspective distortion.
    		</para><para>
		When this property is
		set to
		<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPerspectiveModeConstants">Enabled</see>
		or to
		<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPerspectiveModeConstants">UsePattern</see>
		and the pattern was <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.PerspectiveEnabled">trained for symbols with perspective distortion</see>
		the tool takes extra processing steps to
		decode these kinds of symbols.
    		</para><para>
    			Enabling this property may increase the
    			amount of time needed to decode
    			degraded symbols even if the image
    			has no distortion.
    			For best performance, enable this property
    			only when you know that the the symbol
    			image has perspective distortion.
    		</para></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Timeout"><remarks><PARA>Sets or gets the maximum amount of time in milliseconds that the tool is allowed to decode a symbol. 
The timeout period is used only when <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.TimeoutEnabled" /> is True.
</PARA><PARA>
If the tool has not finished decoding the symbol by the end of this timeout period, it will stop and return 
<see cref="T:Cognex.VisionPro.CogErrConstants">e_Cog_TimeoutExpired</see>.</PARA><NOTE>Due to internal latencies, this timeout value is an approximate upper limit.
The actual execution time can exceed the timeout value by up to 20 milliseconds
on a 200 MHz Pentium I. Latencies on faster CPUs are typically lower.</NOTE><DEFAULT>5000 milliseconds</DEFAULT></remarks><summary>Sets or gets the maximum amount of execution time allowed to decode a symbol.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The timeout value is less than zero.</para></exception><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolRunParams_Timeout--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SfTimeout" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.TimeoutEnabled"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolRunParams_TimeoutEnabled--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SfTimeoutEnabled" /></li></ul></event><summary>Sets or gets whether to use a time limit when decoding symbols.</summary><remarks><PARA>Sets or gets whether to use the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Timeout" /> property that limits the decoding time of the tool.
If <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.TimeoutEnabled" /> is False, timeout is disabled and the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Timeout" /> property is ignored.</PARA><DEFAULT>False</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SearchRegionMode"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The region mode is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><remarks><PARA>Specifies how the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SearchRegion" /> should be applied to the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage" />. 

(These two <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool" /> properties correspond to the <paramref name="SearchRegion" /> and <paramref name="Image" /> parameters of
<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern" />.<see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams)" />.)
</PARA><PARA>The 2D Symbol tool supports only 
<see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> and
 <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see> region modes.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">AlignedBoundingBox</see></DEFAULT></remarks><summary>Sets or gets the mode that specifies how the search region is applied to the input image.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolRunParams_SearchRegionMode--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SfSearchRegionMode" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.TrainAndDecodeEnabled"><remarks><PARA>Returns/sets the flag that designates that the <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> operation should be used to decode the symbol.  This allows the tool to automatically learn new symbol properties for each new symbol on which it is run.  When this flag is true and the tool is run, the pattern's <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> method will be called using the 
<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SearchRegion" /> as the pattern's train region.  The produced <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult" /> will be passed on as the <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult" /> of the tool.  This should be used when symbol properties vary between runs.</PARA><DEFAULT>False</DEFAULT></remarks><summary>Sets or gets whether the tool should Train as part of the decoding operation.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolParams_TimeoutEnabled--><ul /></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult"><summary>The result generated by attempting to find and decode a Data Matrix or QR Code symbol by running the Cog2DSymbolTool. It includes the decoded string as well as other information about the decoded symbol.</summary><remarks>this class is deprecated. Please use CogIDTool instead</remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.ResultGrid"><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotFoundException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotFound"><para>The symbol was not found. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> is False.)</para></exception><summary>Returns the grid applied to compute this result. The affine rectangle that encompasses the symbol will be in the same selected space as the input image.</summary><remarks><PARA>Returns the grid applied to the input image to compute this result. The returned affine rectangle that encloses the symbol is in the same selected space as the input image.</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.IdentifierModifier"><summary>ISO/IEC 15424:2000 symbol identifier modifier character. Useful in uniquely identifying the symbology.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.IdentifierCode"><summary>ISO/IEC 15424:2000 symbol identifier code character. d = DataMatrix, Q = QRCode.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.NumErrorBits"><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotFoundException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotFound"><para>The symbol was not found. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> is False.)</para></exception><remarks><PARA>Returns the number of error bits encountered while decoding the symbol.</PARA><NOTE>This property is not accessible if <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Decoded" /> is False.</NOTE></remarks><summary>Returns the number of erroneous bits encountered while decoding the symbol. Throws E_Cog2DSymbol_SymbolNotDecoded if the symbol was not decoded.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.NumErrors"><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotFoundException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotFound"><para>The symbol was not found. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> is False.)</para></exception><remarks><PARA>Returns the number of erroneous data words encountered while decoding the symbol.</PARA><NOTE>This property is not accessible if <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Decoded" /> is False.</NOTE></remarks><summary>Returns the number of erroneous data words encountered while decoding the symbol. Throws E_Cog2DSymbol_SymbolNotDecoded if the symbol was not decoded.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Score"><remarks><PARA>Returns the result score in the range 0.0 (no match) to 1.0 (perfect match).
</PARA><PARA>
This score represents the quality of the match between the runtime symbol and the trained symbol pattern.</PARA></remarks><summary>Returns the result score in the range 0.0 (no match) to 1.0 (perfect match). This is the quality of the match between the runtime symbol and the trained 2D symbol pattern.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Scale"><remarks><PARA>Returns the scale of the found symbol relative to the trained model size.
</PARA><PARA>A Scale of 1.0 means that the found symbol is the same size as the trained model. A <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Scale" /> of 1.5 means that the found symbol is 50% larger than the trained model.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotFoundException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotFound"><para>The symbol was not found. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> is False.)</para></exception><summary>Returns the scale of the found symbol relative to the trained model size. A Scale of 1.0 designates that the found symbol is the same size as the trained model. A Scale of 1.5 designates that the found symbol is 50% larger than the trained model.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.LocationY"><summary>Returns the Y location of the center of the found symbol in the selected space of the InputImage.</summary><remarks><PARA>Returns the y-location of the center of the found symbol in the selected space of the input image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotFoundException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotFound"><para>The symbol was not found. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> is False.)</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.LocationX"><summary>Returns the X location of the center of the found symbol in the selected space of the InputImage.</summary><remarks><PARA>Returns the x-location of the center of the found symbol in the selected space of the input image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotFoundException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotFound"><para>The symbol was not found. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> is False.)</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.DecodedStringCodePage"><summary>Returns the Code Page that was designated for the DecodedString. It is the character set that was used to construct the unicode DecodedString.</summary><remarks><PARA>Returns the code page that was <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DecodedStringCodePage">designated</see>  for the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.DecodedString" />. This is the character set that was used to construct the Unicode <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.DecodedString" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.DecodedString"><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotFoundException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotFound"><para>The symbol was not found. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> is False.)</para></exception><summary>Returns the decoded data as a unicode string. Throws E_Cog2DSymbol_SymbolNotDecoded if the symbol was not decoded.</summary><remarks><PARA>Returns the decoded data as a unicode string.</PARA><NOTE>This property is not accessible if <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Decoded" /> is False.</NOTE></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Aspect"><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotFoundException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotFound"><para>The symbol was not found. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> is False.)</para></exception><remarks><PARA>Returns the aspect ratio of the found symbol.
The aspect ratio is the ratio of the height to the width of the symbol, and it is expressed in the selected space of the input image.</PARA></remarks><summary>Returns the aspect ratio in the selected space of the input image of the 2D symbol that was found. The aspect ratio is the ratio of the height to the width of the symbol.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Angle"><remarks><PARA>Returns the angle of the found symbol in radians. The angle is normalized from 0 to 2π in the selected space of the input image.</PARA></remarks><summary>Returns the angle, in radians, of the 2D symbol that was found. The angle is normalized from 0 to 2 PI in the selected space of the input image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotFoundException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotFound"><para>The symbol was not found. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> is False.)</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found"><remarks><PARA>Returns True if the symbol was found, False otherwise. 
Even if the symbol was found, it may not have been <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Decoded" /> successfully. If the symbol is not found, the following properties are not accessible:</PARA><LIST><ITEM><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.DecodedString" /></ITEM><ITEM><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.GetDecodedMBCS" /></ITEM><ITEM><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.NumErrors" /></ITEM><ITEM><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.NumErrorBits" /></ITEM></LIST></remarks><summary>Returns true if this symbol is found, false otherwise. Note that even though the symbol was Found, it may not have Decoded successfully. The DecodedString, DecodedMBCS, NumErrors, and NumErrorBits will not be available if the symbol is not found.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Decoded"><remarks><PARA>Returns True if the symbol was decoded, False otherwise.
If the symbol is not found, and it cannot be decoded, the following properties and methods are not accessible:
</PARA><LIST><ITEM><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.DecodedString" /></ITEM><ITEM><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.GetDecodedMBCS" /></ITEM><ITEM><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.NumErrors" /></ITEM><ITEM><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.NumErrorBits" /></ITEM></LIST></remarks><summary>Returns true if this symbol is decoded, false otherwise. If the symbol fails to decode and is not found, the DecodedString, DecodedMBCS, NumErrors, and NumErrorBits will not be accessible.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.GetDecodedMBCS"><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotFoundException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotFound"><para>The symbol was not found. (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Found" /> is False.)</para></exception><remarks><PARA>Returns the decoded data as an array of multi-byte encoded characters.</PARA><NOTE>This property is not accessible if <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolResult.Decoded" /> is False.</NOTE></remarks><summary>Returns the decoded data as a null-terminated array of multi-byte encoded characters (the last two bytes will always be null). Throws an error if the symbol was not decoded.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool"><remarks>this class is deprecated. Please use CogIDTool instead</remarks><summary>The 2D symbol tool that decodes either Data Matrix or QR Code symbols. The tool is initially untrained and must be trained before symbols can be decoded.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfSearchRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SearchRegion may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfPattern"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Pattern may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfResult"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Result may have changed.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.Result"><summary>Returns the run result.</summary><remarks><PARA>Returns the result of finding and decoding the 2D symbol in the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.RunParams"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfRunParams" /></li></ul></event><summary>Returns or sets the run parameters.</summary><remarks><PARA>Sets or gets the parameters required to decode the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.Pattern"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern" /> that described the idealized symbol to find and decode.</PARA><DEFAULT>A <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern" /> with all default values.</DEFAULT></remarks><summary>Returns or sets the pattern operator.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolTool_Pattern--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfPattern" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SearchRegion"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolTool_SearchRegion--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfSearchRegion" /></li></ul></event><summary>Region of interest in the InputImage that is used to locate 2D Symbol pattern. NULL means use entire InputImage. The ICog2DSymbolRunParams::SearchRegionMode property specifies exactly how the region will be applied to this image.</summary><remarks><PARA>Region of interest in the InputImage that is used to locate 2D Symbol pattern. NULL means use entire InputImage. The ICog2DSymbolRunParams::SearchRegionMode property specifies exactly how the region will be applied to this image.</PARA><PARA>Sets or gets the region of the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage" /> that contains the 2D symbol to decode.
The <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SearchRegionMode" /> determines how the input region is used to control which pixels are considered and which are ignored. If no region is supplied, the tool uses the entire <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage" />.
</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage"><remarks><PARA>Sets or gets the image that contains the 2D symbol to decode.</PARA><DEFAULT>Empty (NULL)</DEFAULT></remarks><summary>Returns or sets the input image.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfInputImage" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.CurrentRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfCurrentRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><remarks><PARA>Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants">TrainImage</see> +
	<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants">TrainRegion</see> +
	<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants">InputImage</see> +
	<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants">SearchRegion</see> +
	<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants">NominalGrid</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.LastRunRecordDiagEnable"><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants" />. These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfLastRunRecordDiagEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.LastRunRecordEnable"><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordConstants">ResultGrid</see> +
	<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordConstants">LocatedCenter</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfLastRunRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.Run"><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage" /> is NULL</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.RunParams" /> is NULL</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage" />  is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException" cgnxHRESULT="E_CogOperator_NotTrained"><para>The <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.Pattern">pattern</see>  is not trained.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SearchRegion" /> is not a valid space of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SearchRegion" /> is a nonqualified space name and more than one instance of it exists in the space tree of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SearchRegion" /> is not a legal space name. </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SearchRegion" /> falls  completely outside of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage" />.  Clipping of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SearchRegion" /> is allowed.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams" />.<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.SearchRegionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see>, but <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SearchRegion" /> is not an <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException" cgnxHRESULT="E_Cog_TimeoutExpired"><para>The <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.Timeout" /> period  expired.</para></exception><exception cref="T:System.InvalidCastException" cgnxHRESULT="E_NOINTERFACE"><para>The <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern" /> interface is not available.</para></exception><summary>Runs the tool using the current parameter settings.</summary><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" />
		event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SfResult" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><remarks><PARA>Finds and decodes a 2D symbol in the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.InputImage" /> using the supplied <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.RunParams" />.
You can specify that the tool be limited to part of the input image by supplying a value for the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.SearchRegion" /> property.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify"><remarks>this class is deprecated.</remarks><summary>Class containing 2D Symbol Verify run parameters.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsAIMEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MetricsAIMEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsSupplementalEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MetricsSupplementalEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsIAQGDotEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MetricsIAQGDotEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsIAQGDotIncludeShapeInGrades"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MetricsIAQGDotIncludeShapeInGrades may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfSymbology"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Symbology may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixRows"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DataMatrixRows may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixColumns"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DataMatrixColumns may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixECCLevel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DataMatrixECCLevel may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixAIMComplianceEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DataMatrixAIMComplianceEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfQRCodeGridSize"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by QRCodeGridSize may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfQRCodeModel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by QRCodeModel may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMirrorImageEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MirrorImageEnabled may have changed.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Pattern"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsAIMEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsSupplementalEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsIAQGDotEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsIAQGDotIncludeShapeInGrades" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfSymbology" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixRows" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixColumns" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixECCLevel" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixAIMComplianceEnabled" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfQRCodeGridSize" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfQRCodeModel" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfPolarity" /></li><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMirrorImageEnabled" /></li></ul></event><summary>Convenience write-only property that sets all Cog2DSymbolVerifyParams properties from the supplied Cog2DSymbolTrainResult object.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException" cgnxHRESULT="E_CogOperator_NotTrained"><para><paramref name="Value" />.<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult.Trained" /> is False.</para></exception><remarks><PARA>A write-only property that sets all applicable <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify" /> properties from the supplied <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainResult" /> object, depending on the symbology (Data Matrix or QR code).</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.MirrorImageEnabled"><remarks><PARA>If True, the tool assumes that the symbol is flipped left to right.</PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_MirrorImageEnabled--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMirrorImageEnabled" /></li></ul></event><summary>This flag indicates that the observed symbol is flipped left-right with respect to a normal symbol.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Polarity"><summary>The symbol polarity (dark-on-light or light-on-dark).</summary><remarks><PARA>The symbol polarity (dark-on-light or light-on-dark).</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPolarityConstants">LightOnDark</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The polarity was not in <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPolarityConstants" />.</para></exception><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_Polarity--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfPolarity" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.QRCodeModel"><remarks><PARA>Sets or gets the <see cref="u:Identification.2DSymbol.Theory.ToolTheory" cgnxAnchor="model_type">model type</see> used for the QR Code symbology. Model refers to the version of the QR Code to be decoded. It may be either Model 1 (original) or Model 2 (enhanced), or MicroQR (reduced size).
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeModelConstants">Model1</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_QRCodeModel--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfQRCodeModel" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The QR Code model is not in <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeModelConstants" />.</para></exception><summary>The model for the QRCode symbology. Either Model 1 (original), Model 2 (enhanced), or Micro QR (reduced size).</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.QRCodeGridSize"><summary>The grid size for the QRCode symbology.</summary><remarks><PARA>Sets or gets the grid size for the QR Code symbology. The QR Code symbol grid has the same number of rows and columns. </PARA><PARA>Sizes greater than 17 modules apply only to Model 1 and Model 2 codes. Sizes from 11 to 17 modules apply only to MicroQR code.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants">Size21</see> (21x21 symbol)</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The grid size is not in <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants" />.</para></exception><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_QRCodeGridSize--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfQRCodeGridSize" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.DataMatrixAIMComplianceEnabled"><summary>The AIM compliance flag for the DataMatrix symbology. All AIM-compliant symbols except those at ECC200 have an equal number of rows and columns.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_DataMatrixAIMComplianceEnabled--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixAIMComplianceEnabled" /></li></ul></event><remarks><PARA>Sets or gets the AIM compliance flag used for verifying Data Matrix symbology. For AIM-compliant symbols, the number of rows must be the same as the number of columns for the symbol grid for all versions except <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants">cog2DSymbolDataMatrixECCLevel200</see>.</PARA><PARA>See the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixAIMComplianceEnabled" /> property for more information. </PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.DataMatrixECCLevel"><remarks><PARA>The error correction code level for the Data Matrix symbol. See the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixECCLevel" /> property for more information.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants">cog2DSymbolDataMatrixECCLevel200</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_DataMatrixECCLevel--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixECCLevel" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value specified is not in <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants" />.</para></exception><summary>The error correction code level for the DataMatrix symbology.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.DataMatrixColumns"><summary>The number of columns in the symbol grid for the DataMatrix symbology.</summary><remarks><PARA>The number of columns in the Data Matrix symbol. See the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixColumns" /> property for more information.</PARA><DEFAULT>10</DEFAULT></remarks><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_DataMatrixColumns--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixColumns" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The number of columns  is less than 8 or greater than 48.</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.DataMatrixRows"><remarks><PARA>The number of rows in the Data Matrix symbol. See the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixRows" /> property for more information.</PARA><DEFAULT>10</DEFAULT></remarks><summary>The number of rows in the symbol grid for the DataMatrix symbology.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_DataMatrixRows--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfDataMatrixRows" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The number of rows is less than 8 or greater than 48.</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Symbology"><remarks><PARA>Symbology: Data Matrix or QR Code.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants">DataMatrix</see></DEFAULT></remarks><summary>Symbology: DataMatrix or QRCode.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_Symbology--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfSymbology" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.MetricsIAQGDotIncludeShapeInGrades"><summary>Indicates whether the shape grade is included in the overall grades.</summary><remarks><PARA>Specifies if IAQGDot overall grades should include the shape grade.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_MetricsIAQGDotIncludeShapeInGrades--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsIAQGDotIncludeShapeInGrades" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.MetricsIAQGDotEnabled"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_MetricsIAQGDotEnabled--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsIAQGDotEnabled" /></li></ul></event><remarks><PARA>Specifies if IAQGDot metrics should be measured.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Indicates whether IAQGDot quality metrics will be measured.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.MetricsSupplementalEnabled"><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_MetricsSupplementalEnabled--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsSupplementalEnabled" /></li></ul></event><summary>Indicates whether supplemental quality metrics will be measured.</summary><remarks><PARA>Specifies if supplemental metrics should be measured.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.MetricsAIMEnabled"><summary>Indicates whether AIM quality metrics will be measured.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerify_MetricsAIMEnabled--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SfMetricsAIMEnabled" /></li></ul></event><remarks><PARA>Specifies if AIM metrics should be measured.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogRectangleAffine)"><param name="inputImage"><PARA>The <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" /> containing the Data Matrix or QR code symbol.</PARA></param><param name="region"><PARA>The <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> result grid, generated by the 2D Symbol Tool, that defines the location and orientation of the Data Matrix or QR code symbol in the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage">input image</see>. </PARA></param><summary>Perform verification within (but not limited to) the specified region of the input image. Results generated will depend upon the verification metrics requested in the run parameters.</summary><returns><PARA>The <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult" /> object which holds references to a <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult" /> object, a 
<see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult" /> object, and a <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult" /> object. The reference to any of these objects, 
however, can be Nothing if the associated run parameter is not enabled.</PARA></returns><remarks><PARA>Perform verification within (but not limited to) the supplied result grid of the input image, creating a <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult" /> object which holds references to a <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult" /> object, a <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult" /> object, and a <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult" /> object. The reference to any of these objects, however, can be Nothing if the associated run parameter is not enabled. </PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="region" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <paramref name="region" /> is not a legal space name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="region" /> falls completely outside of <paramref name="inputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <paramref name="region" /> is not a valid space of <paramref name="inputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <paramref name="region" /> is a nonqualified space name and more than one instance of it exists in the space tree of <paramref name="inputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is not a legal space name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is not a valid space name of <paramref name="inputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is a nonqualified space name and more than one instance of it exists in the space tree of <paramref name="inputImage" />.</para></exception></member><member name="E:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult"><remarks>this class is deprecated.</remarks><summary>Class containing a 2D Symbol Verify AIM result.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.OverallSymbolGrade"><remarks><PARA>The AIM overall symbol grade, which is the minimum of all the other AIM grades. </PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks><summary>AIM overall symbol grade.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.UnusedErrorCorrection"><summary>AIM unused error correction. The higher the unused error correction capacity, the better the symbol quality. Ranges from 0 (all error correction capacity used) to 1.0 (no error correction capacity used).</summary><remarks><PARA>AIM unused error correction. The higher the unused error correction capacity, the better the symbol quality. Ranges from 0 (all error correction capacity used) to 1.0 (no error correction capacity used).</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.UnusedErrorCorrectionGrade"><remarks><PARA>AIM unused error correction grade. The greater the unused error correction capacity, the better the grade. A (almost all capacity is unused), B, C, D, or F (all, or almost all capacity is used).</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks><summary>AIM unused error correction grade. The greater the unused error correction capacity, the better the grade. A (almost all capacity is unused), B, C, D, or F (all, or almost all capacity is used).</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.AxialNonuniformity"><summary>AIM axial nonuniformity. This is a measure of how much the sampling point spacing differs between the X and Y axes. A value of 0 means there is no difference.</summary><remarks><PARA>The AIM axial nonuniformity, which is a measure of how much the sampling point spacing differs between the X and Y axes. A value of 0 indicates there is no difference. </PARA><PARA>AIM Inc. defines axial nonuniformity as: </PARA><PARA>abs(Xavg - Yavg) / ((Xavg + Yavg) / 2)</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.AxialNonuniformityGrade"><remarks><PARA>The AIM axial nonuniformity grade, which is a measure of how much the sampling point spacing differs from one axis to another. Based upon the axial nonuniformity, this grade is assigned as: </PARA><bulletList><bullet-1>A: &lt;= 0.06</bullet-1><bullet>B: &lt;=  0.08</bullet><bullet>C: &lt;=  0.10</bullet><bullet>D: &lt;=  0.12</bullet><bullet>F: &gt; 0.12</bullet></bulletList><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks><summary>AIM axial nonuniformity grade. This is a measure of how much the sampling point spacing differs from one axis to another. A (negligible), B, C, D, or F (excessive).</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.PrintGrowthVertical"><remarks><PARA>This is the AIM print growth in the vertical direction. It is computed by summing the dark pixels (ND) and the light pixels (NL) along a vertical sample line.  For Data Matrix symbols this sample line runs through the center of the right-most column. For QR Code symbols this sample line runs along the timing patterns. The result is computed as ND / (ND + NL).</PARA><DEFAULT>0</DEFAULT></remarks><summary>AIM normalized print growth in vertical direction. Ranges from -1 to 1, with a nominal value of 0.0.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.PrintGrowthHorizontal"><summary>AIM normalized print growth in horizontal direction. Ranges from -1 to 1, with a nominal value of 0.0.</summary><remarks><PARA>This is the AIM print growth in the horizontal direction. It is computed by summing the dark pixels (ND) and the light pixels (NL) along a horizontal sample line. For Data Matrix symbols this 
sample line runs through the center of the top row. For QR Code symbols this sample line runs along the timing patterns. The result is computed as ND / (ND + NL). </PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.PrintGrowthGrade"><summary>AIM print growth grade. A (negligible deviation from nominal), B, C, D,  or F (excessive deviation from nominal).</summary><remarks><PARA>The AIM print growth grade. Grades A, B, C, D, or F are assigned as follows: </PARA><PARA>For each direction (horizontal, vertical), compute normalized growth as:</PARA><PARA>GN = (G - 0.5) / 0.15</PARA><PARA>Growth grade for this direction is then: </PARA><bulletList><bullet-1>A: -0.5 &lt;= GN &lt;= 0.5</bullet-1><bullet>B: -0.7 &lt;= GN &lt;= 0.7</bullet><bullet>C: -0.85 &lt;= GN &lt;= 0.85</bullet><bullet>D: -1.0 &lt;= GN &lt;= 1.0</bullet><bullet>F: GN &lt; -1.0 or GN &gt; .1.0</bullet></bulletList><PARA>The reported print growth grade is the lower (worse) of the two. </PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.SymbolContrast"><summary>AIM symbol contrast. Range is 0.0 (no contrast) to 1.0 (full contrast).</summary><remarks><PARA>The AIM symbol contrast grade, which indicates the difference in reflectance between the light and dark elements of the symbol, including the quiet zone. The higher the contrast difference, the higher the grade.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.SymbolContrastGrade"><remarks><PARA>AIM symbol contrast grade. A: &gt;= .7, B: &gt;= .55, C: &gt;= .4, D: &gt;= .2, F: &lt; .2 symbol contrast.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks><summary>AIM symbol contrast grade. A: &gt;= .7, B: &gt;= .55, C: &gt;= .4, D: &gt;= .2, F: &lt; .2 symbol contrast.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.ReferenceDecodeGrade"><summary>AIM reference decode grade. Either A or F.</summary><remarks><PARA>This is the AIM reference decode grade, either A if the symbol was decoded using the AIM standardized algorithm, or F if it was not. </PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult"><remarks>this class is deprecated.</remarks><summary>Class containing a 2D Symbol Verify IAQGDot result.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows"><summary>The number of rows in this symbol.</summary><remarks><PARA>The number of rows in this symbol.</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns"><remarks><PARA>The number of columns in this symbol.</PARA></remarks><summary>The number of columns in this symbol.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.OverallDotGrade"><summary>IAQGDot overall dot grade. A or F.</summary><remarks><PARA>The IAQGDot overall dot grade, implementing the specification's rule: No more than 2% of the total number of cells may contain dots that are outside of these ranges. </PARA><PARA>Reference Section 3.2.2, page 7 of the spec. </PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.AngleOfDistortion"><summary>IAQGDot angle of distortion in radians.</summary><remarks><PARA>IAQGDot angle of distortion, or the skew angle of the input result grid, measured in radians.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.AngleOfDistortionGrade"><remarks><PARA>This is the IAQGDot angle of distortion grade, which is assigned as follows:</PARA><bulletList><bullet>A: Absolute value of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.AngleOfDistortion" /> &lt;= 3.5 degrees</bullet><bullet>B: Absolute value of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.AngleOfDistortion" /> &lt;= 7.0 degrees</bullet><bullet>F: Absolute value of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.AngleOfDistortion" /> &gt; 7.0 degrees</bullet></bulletList><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks><summary>IAQGDot angle of distortion grade. A (best), B, or F (worst).</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetDotExpected(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><summary>Whether or not a dot was expected at the specified column and row.</summary><remarks><PARA>This indicates whether or not a dot was expected at the cell having this column and row. We know where dots are expected because the input symbol has been decoded. This decoding allows us to reconstruct a map of expected dot locations.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetDotFound(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><remarks><PARA>Indicates whether or not a dot was found at the specified column and row.</PARA></remarks><summary>Whether or not a dot was found at the specified column and row.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetDotGrade(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><summary>The combined grade for the dot at this column and row.</summary><remarks><PARA>A <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants" /> value for the combined grade of the dot at this column and row, either A, B, or F.</PARA></remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationValid(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><remarks><PARA>Indicates whether the location of the dot at this column and row could be measured.</PARA></remarks><summary>Indicates whether the location of the dot at this column and row could be measured.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationX(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationValid(System.Int32,System.Int32)" />
is False.</para></exception><summary>The measured X coordinate of the dot at this column and row.</summary><remarks><PARA>The measured x-coordinate of the dot at this column and row.</PARA></remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationY(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationValid(System.Int32,System.Int32)" />
is False.</para></exception><summary>The measured Y coordinate of the dot at this column and row.</summary><remarks><PARA>The measured y-coordinate of the dot at this column and row.</PARA></remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationExpectedX(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><remarks><PARA>The expected x-coordinate of the dot at this column and row.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationValid(System.Int32,System.Int32)" />
is False.</para></exception><summary>The expected X coordinate of the dot at this column and row.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationExpectedY(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationValid(System.Int32,System.Int32)" />
is False.</para></exception><remarks><PARA>The expected y-coordinate of the dot at this column and row.</PARA></remarks><summary>The expected Y coordinate of the dot at this column and row.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationDeviationPercent(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><remarks><PARA>The location deviation percent of the dot at this column and row.</PARA></remarks><summary>The location deviation percent of the dot  at this column and row.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationValid(System.Int32,System.Int32)" />
is False.</para></exception></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationGrade(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><summary>The location grade of the dot at this column and row.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetLocationValid(System.Int32,System.Int32)" />
is False.</para></exception><remarks><PARA>A <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants" /> value for the location grade of the dot at this column and row, either A, B, or F.</PARA></remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetSizeValid(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><summary>Indicates whether the size of the dot at this column and row could be measured.</summary><remarks><PARA>Indicates whether the size of the dot at this column and row could be measured.</PARA></remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetSizeDiameter(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetShapeValid(System.Int32,System.Int32)" />  is False.</para></exception><remarks><PARA>The measured diameter of the dot at this column and row.</PARA></remarks><summary>The measured diameter of the dot at this column and row.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetSizePercent(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetShapeValid(System.Int32,System.Int32)" />  is False.</para></exception><summary>The size of the dot at this column and row as a percentage of the nominal module size.</summary><remarks><PARA>The size of the dot at this column and row as a percentage of the nominal module size.</PARA></remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetSizeGrade(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><remarks><PARA>A <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants" /> value for the size grade of the dot at this column and row, either A, B, or F.</PARA></remarks><summary>The size grade of the dot at this column and row.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetShapeValid(System.Int32,System.Int32)" />  is False.</para></exception></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetShapeValid(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><remarks><PARA>Indicates whether the shape of the dot at this column and row could be measured.</PARA></remarks><summary>Indicates whether the shape of the dot at this column and row could be measured.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetShapeOvality(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><remarks><PARA>The measured ovality of the dot at this column and row.</PARA></remarks><summary>The measured ovality of the dot at this column and row.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetShapeValid(System.Int32,System.Int32)" />  is False.</para></exception></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetShapeGrade(System.Int32,System.Int32)"><param name="column"><PARA>The column of the symbol where the dot resides.</PARA></param><param name="row"><PARA>The row of the symbol where the dot resides. </PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="column" /> &lt; 0 or <paramref name="column" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumColumns" /> − 1)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> &lt; 0 or <paramref name="row" /> &gt; (<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.NumRows" /> − 1)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para><see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.GetShapeValid(System.Int32,System.Int32)" />  is False.
</para></exception><summary>The shape grade of the dot at this column and row.</summary><remarks><PARA>A <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants" /> value for the shape grade of the dot at this column and row, either A, B, or F.</PARA></remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.CreateResultMaskGraphic(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotGraphicConstants)"><param name="graphicOption"><PARA>A <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotGraphicConstants" /> graphics option.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para>No result data is available.</para></exception><summary>Creates a mask graphic depicting the specified IAQGDot result category (location, size, shape, combined).</summary><remarks><PARA>This method generates an <see cref="T:Cognex.VisionPro.CogMaskGraphic" />
that depicts a color-coded map of the inspected dots.
Color coding reflects the <see cref="u:Identification.2DSymbolVerify.Theory.ToolTheory" cgnxAnchor="IAQGDot">per-dot grade</see> for the specified result category (location, size, shape, combined):
</PARA><PARA><TABLE><CAPTION>Per-dot grade mask colors</CAPTION><HEADING><ROW><CELL>Grade</CELL><CELL>Color</CELL></ROW></HEADING><BODY><ROW><CELL>A</CELL><CELL>Dark green</CELL></ROW><ROW><CELL>B</CELL><CELL>Green</CELL></ROW><ROW><CELL>C</CELL><CELL>Yellow</CELL></ROW><ROW><CELL>D</CELL><CELL>Orange</CELL></ROW><ROW><CELL>F</CELL><CELL>Red</CELL></ROW></BODY></TABLE></PARA><PARA>In cases where no grade can be generated for a particular site, the tool uses the color magenta.</PARA></remarks><returns><PARA>The <see cref="T:Cognex.VisionPro.CogMaskGraphic" /> depicting a color-coded map of the inspected dots. </PARA></returns></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult.CreateResultContourGraphic(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotContourGraphicConstants)"><param name="graphicOption"><PARA>A <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotContourGraphicConstants" /> graphics option.</PARA></param><returns><PARA>The <see cref="T:Cognex.VisionPro.CogGeneralContour" /> depicting a color-coded map of the inspected dots. </PARA></returns><summary>Creates a general contour graphic depicting the specified IAQGDot result category (location, size, shape, combined).</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para>No result data is available.</para></exception><remarks><PARA>This method generates an <see cref="T:Cognex.VisionPro.CogGeneralContour" /> that depicts a color-coded map of the inspected dots. Color coding reflects the <see cref="u:Identification.2DSymbolVerify.Theory.ToolTheory" cgnxAnchor="IAQGDot">per-dot grade</see> for the specified result category (location, size, shape, combined):</PARA><PARA><TABLE><CAPTION>Per-dot grade mask colors</CAPTION><HEADING><ROW><CELL>Grade</CELL><CELL>Color</CELL></ROW></HEADING><BODY><ROW><CELL>A</CELL><CELL>Dark green</CELL></ROW><ROW><CELL>B</CELL><CELL>Green</CELL></ROW><ROW><CELL>C</CELL><CELL>Yellow</CELL></ROW><ROW><CELL>D</CELL><CELL>Orange</CELL></ROW><ROW><CELL>F</CELL><CELL>Red</CELL></ROW></BODY></TABLE></PARA><PARA>In cases where no grade can be generated for a particular site, the tool uses the color magenta.</PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult"><summary>Class containing a 2D Symbol Verify supplemental result.</summary><remarks>this class is deprecated.</remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.SymbolSeparability"><summary>Supplemental symbol separability. 1.0 (best) or 0.0 (worst).</summary><remarks><PARA>Supplemental symbol separability. 1.0 (best) or 0.0 (worst).</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.SymbolSeparabilityGrade"><remarks><PARA>The supplemental symbol separability grade, assigned as follows:</PARA><bulletList><bullet>A: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.SymbolSeparability" /> == 1</bullet><bullet>F: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.SymbolSeparability" /> == 0</bullet></bulletList><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks><summary>Supplemental symbol separability grade. A or F.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityDotmatrix"><summary>Supplemental finder pattern conformity for a dot matrix symbol. Range is 1.0 (best) to 0.0 (worst).</summary><remarks><PARA>The supplemental finder pattern conformity based upon the assumption that this was a dot matrix symbol. Range is 1.0 (best) to 0.0 (worst).</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityDotmatrixGrade"><summary>Supplemental finder pattern conformity grade for a dot matrix symbol. A (best), B, C, D, or F (worst).</summary><remarks><PARA>The supplemental finder pattern conformity grade based upon the assumption that this was a dot matrix symbol, assigned as follows: </PARA><bulletList><bullet>A: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuous" /> &gt;= 0.999</bullet><bullet>B: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuous" /> &gt;= 0.9</bullet><bullet>C: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuous" /> &gt;= 0.8</bullet><bullet>D: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuous" /> &gt;= 0.7</bullet><bullet>F: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuous" /> &lt; 0.7</bullet></bulletList><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuous"><remarks><PARA>The supplemental finder pattern conformity based upon the assumption that this was a continuous symbol. Range is 1.0 (best) to 0.0 (worst).</PARA><DEFAULT>0</DEFAULT></remarks><summary>Supplemental finder pattern conformity for a continuous symbol. Range is 1.0 (best) to 0.0 (worst).</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuousGrade"><summary>Supplemental finder pattern conformity grade for a continuous symbol. A (best), B, C, D, or F (worst).</summary><remarks><PARA>The supplemental finder pattern conformity grade based upon the assumption that this was a continuous symbol, assigned as follows: </PARA><bulletList><bullet>A: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuous" /> &gt;= 0.999</bullet><bullet>B: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuous" /> &gt;= 0.9</bullet><bullet>C: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuous" /> &gt;= 0.8</bullet><bullet>D: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuous" /> &gt;= 0.7</bullet><bullet>F: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.FinderPatternConformityContinuous" /> &lt; 0.7</bullet></bulletList><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ModuleSeparability"><remarks><PARA>Supplemental module separability. Range is 1.0 (best) to 0.0 (worst).</PARA><DEFAULT>0</DEFAULT></remarks><summary>Supplemental module separability. Range is 1.0 (best) to 0.0 (worst).</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ModuleSeparabilityGrade"><remarks><PARA>The supplemental module separability grade, assigned as follows:</PARA><bulletList><bullet>A: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ModuleSeparability" /> &gt;= 0.75</bullet><bullet>B: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ModuleSeparability" /> &gt;= 0.6</bullet><bullet>C: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ModuleSeparability" /> &gt;= 0.5</bullet><bullet>D: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ModuleSeparability" /> &gt;= 0.4</bullet><bullet>F: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ModuleSeparability" /> &lt; 0.4</bullet></bulletList><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks><summary>Supplemental module separability grade. A (best), B, C, D, or F (worst).</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ImageSharpness"><remarks><PARA>Supplemental image sharpness. Range is 1.0 (best) to 0.0 (worst).</PARA><DEFAULT>0</DEFAULT></remarks><summary>Supplemental image sharpness. Range is 1.0 (best) to 0.0 (worst).</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ImageSharpnessGrade"><remarks><PARA>The supplemental image sharpness grade, assigned as follows:</PARA><bulletList><bullet>A: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ImageSharpness" /> &gt;= 0.5</bullet><bullet>B: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ImageSharpness" /> &gt;= 0.3</bullet><bullet>C: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ImageSharpness" /> &gt;= 0.2</bullet><bullet>D: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ImageSharpness" /> &gt;= 0.1</bullet><bullet>F: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.ImageSharpness" /> &lt; 0.1</bullet></bulletList><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks><summary>Supplemental image sharpness grade. A (best), B, C, D, or F (worst).</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.BackgroundUniformity"><remarks><PARA>Supplemental background uniformity. Range is 1.0 (best) to 0.0 (worst).</PARA><DEFAULT>0</DEFAULT></remarks><summary>Supplemental background uniformity. Range is 1.0 (best) to 0.0 (worst).</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.BackgroundUniformityGrade"><summary>Supplemental background uniformity grade. A (best), B, C, D, or F (worst).</summary><remarks><PARA>The supplemental background uniformity grade, assigned as follows:</PARA><bulletList><bullet>A: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.BackgroundUniformity" /> &gt;= 0.9</bullet><bullet>B: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.BackgroundUniformity" /> &gt;= 0.8</bullet><bullet>C: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.BackgroundUniformity" /> &gt;= 0.7</bullet><bullet>D: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.BackgroundUniformity" /> &gt;= 0.6</bullet><bullet>F: <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.BackgroundUniformity" /> &lt; 0.6</bullet></bulletList><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants">F</see></DEFAULT></remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIntrnlResult.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIntrnlResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIntrnlResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIntrnlResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIntrnlResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIntrnlResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult"><summary>Class containing 2D Symbol Verify result.</summary><remarks>this class is deprecated.</remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult.MetricsIAQGDot"><remarks><PARA>The IAQGDot result object created if <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.MetricsIAQGDotEnabled" /> is set to True.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>IAQGDot 2D symbol quality metrics.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult.MetricsSupplemental"><remarks><PARA>The Supplemental result object created if <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.MetricsSupplementalEnabled" /> is set to True.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>Supplemental 2D symbol quality metrics.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult.MetricsAIM"><remarks><PARA>The AIM result object created if <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.MetricsAIMEnabled" /> is set to True.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>AIM 2D symbol quality metrics.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool"><summary>Tool which performs 2D symbol verification.</summary><remarks>this class is deprecated.</remarks></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.#ctor(Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfResult"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Result may have changed.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.Result"><remarks><PARA>The <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyResult" /> object which contains the tool output. </PARA></remarks><summary>The verification results from the input image and region.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.RunParams"><summary>Run parameters for 2D Symbol Verify processing.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerifyTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfRunParams" /></li></ul></event><remarks><PARA>An <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify" /> object containing run parameters for symbol verification.</PARA><DEFAULT>A default constructed <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify" />.</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.Region"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerifyTool_Region--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfRegion" /></li></ul></event><remarks><PARA>The affine rectangle that defines the result grid surrounding the decoded symbol within the <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" />. </PARA><DEFAULT>NULL</DEFAULT></remarks><summary>The affine rectangle that defines the bounds within the InputImage of the symbol to be processed.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerifyTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfInputImage" /></li></ul></event><remarks><PARA>The image containing the decoded Data Matrix or QR Code symbol. </PARA><DEFAULT>NULL</DEFAULT></remarks><summary>The image to be processed.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.CurrentRecordEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyCurrentRecordConstants">CurrentRecordConstants</see>.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyCurrentRecordConstants">InputImage</see> + <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyCurrentRecordConstants">Region</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerifyTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfCurrentRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.LastRunRecordDiagEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerifyTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfLastRunRecordDiagEnable" /></li></ul></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants">LastRunRecordDiagConstants</see>. These are diagnostic records that may cause the tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants">cog2DSymbolLastRunRecordDiagInputImageByReference</see> + <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants">cog2DSymbolLastRunRecordDiagRegion</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.LastRunRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cog2DSymbolVerifyTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfLastRunRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordConstants">LastRunRecordConstants</see>.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.Run"><remarks><PARA>Perform print quality verification of the decoded symbol, and generate optional <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyAIMResult" /> results, <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifySupplementalResult" /> results, and <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotResult" /> results.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool" /> returns or in a
			<event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.SfResult" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><summary>Runs the tool using the current parameter settings.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.Region" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.Region" /> is not a legal space name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.Region" /> falls completely outside of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.Region" /> is not a valid space of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.Region" /> is a nonqualified space name and more than one instance of it exists in the space tree of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" /> is not a legal space name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" /> is not a valid space name of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" /> is a nonqualified space name and more than one instance of it exists in the space tree of <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.RunParams" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.CogPDF417"><remarks>this class is deprecated. Please use CogIDTool instead</remarks><summary>The operator that performs PDF417 decoding. The primary interface provides access to the RegionMode and Timeout parameters, and a method to execute a find and decode operation.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417.#ctor(Cognex.VisionPro.TwoDSymbol.CogPDF417)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417.SfRegionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417.SfTimeoutEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TimeoutEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417.SfTimeout"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Timeout may have changed.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.Timeout"><event cref="E:Cognex.VisionPro.TwoDSymbol.CogPDF417.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPDF417_cogPDF417_Timeout--><ul /></event><remarks><PARA>Sets or gets  the maximum execution time in milliseconds that the tool is allowed to run.
The timeout period is used only when <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.TimeoutEnabled" /> is True.
</PARA><PARA>
If the tool has not finished decoding the symbol by the end of this timeout period, it will stop and return 
<see cref="T:Cognex.VisionPro.CogErrConstants">e_Cog_TimeoutExpired</see>.</PARA><NOTE>Due to internal latencies, this timeout value is an approximate upper limit.
The actual execution time can exceed the timeout value by up to 20 milliseconds
on a 200 MHz Pentium I. Latencies on faster CPUs are typically lower.</NOTE><DEFAULT>5000 milliseconds</DEFAULT></remarks><summary>Returns/sets the maximum execution time (msec) allowed to execute. If the decode has not finished by the end of the timeout period, it will stop soon thereafter and return E_Cog_TimeoutExpired. This value only applies if TimeoutEnabled is true.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The timeout value is less than zero.</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.TimeoutEnabled"><summary>Returns/sets the use of the Timeout property that limits the execution time of the PDF417 symbol find and decode. If false, then timeout is disabled and the Timeout property is ignored.</summary><remarks><PARA>Sets or gets whether to use the <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.Timeout" /> property that limits the execution time of the tool.
If <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.TimeoutEnabled" /> is False, timeout is disabled and the <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.Timeout" /> property is ignored.</PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.TwoDSymbol.CogPDF417.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPDF417_cogPDF417_TimeoutEnabled--><ul /></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.RegionMode"><remarks><PARA>Specifies how the <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Region" /> parameter should be interpreted.
The PDF417 Tool supports only 
<see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> and
 <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see> region modes.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see></DEFAULT></remarks><summary>Returns/sets the mode which specifies how the region is to be applied to the input image of a PDF417 decode.</summary><event cref="E:Cognex.VisionPro.TwoDSymbol.CogPDF417.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPDF417_RegionMode--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.CogPDF417.SfRegionMode" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The region mode is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image that contains the PDF417 symbol.</PARA></param><param name="region"><PARA>A region that, together with <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.RegionMode" />, describes  where in <paramref name="Image" /> the symbol is located.</PARA></param><returns><PARA>The result of finding and decoding the PDF417 symbol.</PARA></returns><summary>Decode a PDF417 symbol on the given region/image. A CogPDF417Result object will be created to describe the decoded string and its attributes.</summary><remarks><PARA>Finds and decodes a PDF417 symbol in the provided <paramref name="Image" /> and optional <paramref name="region" />.
The returned <see cref="T:Cognex.VisionPro.TwoDSymbol.CogPDF417Result" /> contains the decoded string and its attributes.
</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="Image" /> is NULL</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="Image" />  is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <paramref name="region" /> is not a valid space of <paramref name="Image" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="region" /> is a nonqualified space name and more than one instance of it exists in the space tree of <paramref name="Image" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="region" /> is not a legal space name. </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="region" /> falls  completely outside of <paramref name="Image" />.  Clipping of <paramref name="region" /> is allowed.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException" cgnxHRESULT="E_Cog_TimeoutExpired"><para>The <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.Timeout" /> period  expired.</para></exception></member><member name="E:Cognex.VisionPro.TwoDSymbol.CogPDF417.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.CogPDF417Result"><remarks>this class is deprecated. Please use CogIDTool instead</remarks><summary>The PDF417 Result generated by running the CogPDF417Tool. It includes the decoded string as well as other information about the decoded symbol.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.#ctor(Cognex.VisionPro.TwoDSymbol.CogPDF417Result)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.UnusedErrorFraction"><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotDecodedException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotDecoded"><para>The symbol was not decoded (<see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Decoded" /> is False).</para></exception><summary>Returns the ratio of the unused error correction codewords to the total number of error correction codewords specified by the error correction level encoded in the symbol.</summary><remarks><PARA>Returns the ratio of the unused error correction codewords to the total number of error correction codewords specified by the error correction level encoded in the symbol.</PARA><PARA>This value can range from 0.0 to 1.0. Any misread is treated as a failure and <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Decoded" /> will be False.</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.NumErrors"><remarks><PARA>Returns the number of errors (both rejection and substitution) in data words encountered and corrected while decoding the symbol.</PARA></remarks><summary>Returns the number of errors (both rejection and substitution) in data words encountered and corrected while decoding the symbol.</summary><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotDecodedException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotDecoded"><para>The symbol was not decoded (<see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Decoded" /> is False).</para></exception></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Columns"><remarks><PARA>Returns the number of data columns in the data region of the decoded symbol.
This is the number of data codewords between the <see cref="u:Identification.PDF417.Theory.ToolTheory" cgnxAnchor="pdf417_symbol_structure">left and right row indicators</see>. The returned value ranges from 1 to 30.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotDecodedException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotDecoded"><para>The symbol was not decoded (<see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Decoded" /> is False).</para></exception><summary>Returns the number of data columns in the data region of the decoded symbol. In each row of a PDF417 symbol, between left and right row indicators, there may be from 1 to 30 data codewords. The returned value ranges from 1 to 30.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Rows"><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotDecodedException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotDecoded"><para>The symbol was not decoded (<see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Decoded" /> is False).</para></exception><summary>Returns the number of data rows in the data region of the decoded symbol. A row is a lateral set of elements made up of a start pattern, codewords, and a stop pattern. The returned value ranges from 3 to 90.</summary><remarks><PARA>Returns the number of data rows in the data region of the decoded symbol. 
A row is an horizontal set of elements made up of a <see cref="u:Identification.PDF417.Theory.ToolTheory" cgnxAnchor="pdf417_symbol_structure">left row indicator, a set of data codewords, and a right row indicator</see>. The returned value ranges from 3 to 90.
</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.DecodedString"><exception cref="T:Cognex.VisionPro.Exceptions.Cog2DSymbolNotDecodedException" cgnxHRESULT="E_Cog2DSymbol_SymbolNotDecoded"><para>The symbol was not decoded (<see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Decoded" /> is False).</para></exception><summary>Returns the decoded data as a unicode string. If Decoded is false, then the DecodedString is not available.</summary><remarks><PARA>Returns the decoded data as a unicode string. If <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Decoded" /> is False, then the decoded string is not available.</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Decoded"><remarks><PARA>Returns True if the symbol was found and decoded, False otherwise.
If the symbol was not found or if it was not decoded successfully, <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Decoded" /> returns False and attempting to access any  of the other <see cref="T:Cognex.VisionPro.TwoDSymbol.CogPDF417Result" /> values will result in an error.</PARA></remarks><summary>Returns true if the symbol was both found and decoded, false otherwise. Decoded is true if the information encoded in the symbol under consideration was found and successfully decoded. All other results will not be available if Decoded is false.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417Result.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool"><remarks>this class is deprecated. Please use CogIDTool instead</remarks><summary>The tool that finds and decodes a PDF417 stacked barcode symbol. Returns a result via the result object. The PDF417 symbol tool is able to detect the encoded information directly from the image. Therefore, no learning phase is needed before decoding.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.#ctor(Cognex.VisionPro.TwoDSymbol.CogPDF417Tool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfResult"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Result may have changed.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Result"><remarks><PARA>Returns the result of finding and decoding the PDF417 symbol in the <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.InputImage" />.</PARA></remarks><summary>Returns the result of finding and decoding the PDF417 symbol in the InputImage.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.RunParams"><summary>Returns or sets the run parameters required to decode the InputImage.</summary><remarks><PARA>Sets or gets the parameters required to decode the <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.InputImage" />.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPDF417Tool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfRunParams" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Region"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPDF417Tool_Region--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfRegion" /></li></ul></event><summary>Returns or sets the region of interest on the InputImage.</summary><remarks><PARA>Sets or gets the region of the <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.InputImage" /> that contains the PDF417 symbol to decode.
The <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.RegionMode" /> determines how the input region is used to control which pixels are considered and which are ignored. If no region is supplied, the tool uses the entire <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.InputImage" />.
</PARA></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.InputImage"><summary>Returns or sets the input image that will be decoded.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPDF417Tool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfInputImage" /></li></ul></event><remarks><PARA>Sets or gets the image that contains the PDF417 symbol to decode.</PARA><DEFAULT>Empty (NULL)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.CurrentRecordEnable"><remarks><PARA>Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.TwoDSymbol.CogPDF417CurrentRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.CogPDF417CurrentRecordConstants">cogPDF417CurrentRecordInputImage </see> + 
   <see cref="T:Cognex.VisionPro.TwoDSymbol.CogPDF417CurrentRecordConstants">Region</see>.
	</DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPDF417Tool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfCurrentRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.LastRunRecordDiagEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPDF417Tool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfLastRunRecordDiagEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordDiagConstants" />. These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.LastRunRecordEnable"><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.TwoDSymbol.CogPDF417CurrentRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPDF417Tool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.SfLastRunRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Run"><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.RunStatus" /> after <see cref="T:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool" /> returns or in a
		<event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><remarks><PARA>Finds and decodes a PDF417 symbol in the <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.InputImage" /> using the supplied <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.RunParams" />.
You can specify that the tool be limited to part of the input image by supplying a value for the <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Region" /> property.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><summary>Runs the tool using the current parameter settings.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.InputImage" /> is NULL</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.RunParams" /> is NULL</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.InputImage" />  is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Region" /> is not a valid space of <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Region" /> is a nonqualified space name and more than one instance of it exists in the space tree of <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Region" /> is not a legal space name. </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Region" /> falls  completely outside of <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.InputImage" />.  Clipping of <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Region" /> is allowed.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.RegionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see>, but <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Region" /> is not an <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException" cgnxHRESULT="E_Cog_TimeoutExpired"><para>The <see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417.Timeout" /> period  expired.</para></exception><exception cref="T:System.InvalidCastException" cgnxHRESULT="E_NOINTERFACE"><para>The <see cref="T:Cognex.VisionPro.TwoDSymbol.CogPDF417" /> interface is not available.</para></exception></member><member name="M:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants"><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.CurrentRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
Cog2DSymbol Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
   See 
   	<see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cog2dsymboltool_record_keys">About Record Keys</see>
   for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants.All"><summary>Include all possible records in the CurrentRecord.</summary><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants.TrainedLocatedCenter"><remarks><PARA>Display a point marker that represents the center of the located symbol on the TrainImage in the CurrentRecord.</PARA></remarks><summary>Display a point marker that represents the center of the located symbol on the TrainImage in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants.TrainResultGrid"><remarks><PARA>Include the (non-interactive) result grid produced by Train() in the CurrentRecord. By default, it is displayed as a dark green affine rectangle.</PARA></remarks><summary>Include the (non-interactive) result grid produced by Train() in the CurrentRecord. By default, it is displayed as a dark green affine rectangle.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants.NominalGrid"><summary>Include the (interactive) nominal grid to be used for training in the CurrentRecord. By default, it is displayed as a magenta affine rectangle.</summary><remarks><PARA>Include the (interactive) nominal grid to be used for training in the CurrentRecord. By default, it is displayed as a magenta affine rectangle.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants.TrainRegion"><remarks><PARA>Include the (interactive) train region in the CurrentRecord.</PARA></remarks><summary>Include the (interactive) train region in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants.TrainImage"><remarks><PARA>Include the entire train image in the CurrentRecord.</PARA></remarks><summary>Include the entire train image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants.None"><summary>Do not include any records in the CurrentRecord.</summary><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants.SearchRegion"><summary>Include the (interactive) search region to be used for finding and decoding symbols in the CurrentRecord.</summary><remarks><PARA>Include the (interactive) search region to be used for finding and decoding symbols in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCurrentRecordConstants.InputImage"><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks><summary>Include the input image in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordConstants"><summary>Enumeration of non-diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
Cog2DSymbol Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
   See 
   	<see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cog2dsymboltool_record_keys">About Record Keys</see>
   for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordConstants.All"><remarks><PARA>Include all of the nondiagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordConstants.LocatedCenter"><summary>Display a point marker that represents the center of the located symbol on the InputImage in the LastRunRecord.</summary><remarks><PARA>Display a point marker that represents the center of the located symbol on the InputImage in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordConstants.ResultGrid"><summary>Display the result grid on the InputImage in the LastRunRecord.</summary><remarks><PARA>Display the result grid on the InputImage in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordConstants.None"><remarks><PARA>Do not include any of the nondiagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
Cog2DSymbol Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
   See 
   	<see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cog2dsymboltool_record_keys">About Record Keys</see>
   for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.All"><summary>Include all of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.TransformedTrainedLocatedCenter"><summary>Display a point marker that represents the center of the located symbol on the TransformedTrainRegionImage in the LastRunRecord.</summary><remarks><PARA>Display a point marker that represents the center of the located symbol on the TransformedTrainRegionImage in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.TransformedTrainResultGrid"><remarks><PARA>Display the result grid on the TransformedTrainRegionImage in the LastRunRecord.</PARA></remarks><summary>Display the result grid on the TransformedTrainRegionImage in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.TransformedTrainRegionImage"><remarks><PARA>Generate a record containing the pixels within the affine transformed train region of the TrainImage.</PARA></remarks><summary>Generate a record containing the pixels within the affine transformed train region of the TrainImage.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.TransformedLocatedCenter"><summary>Display a point marker that represents the center of the located symbol on the TransformedSearchRegionImage in the LastRunRecord.</summary><remarks><PARA>Display a point marker that represents the center of the located symbol on the TransformedSearchRegionImage in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.TransformedResultGrid"><remarks><PARA>Display the result grid on the TransformedSearchRegionImage in the LastRunRecord.</PARA></remarks><summary>Display the result grid on the TransformedSearchRegionImage in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.TransformedSearchRegionImage"><remarks><PARA>Generate a record containing the pixels within the affine transformed search region of the InputImage.</PARA></remarks><summary>Generate a record containing the pixels within the affine transformed search region of the InputImage.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.TrainedLocatedCenter"><summary>Display a point marker that represents the center of the located symbol on the TrainImage in the LastRunRecord.</summary><remarks><PARA>Display a point marker that represents the center of the located symbol on the TrainImage in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.TrainResultGrid"><remarks><PARA>Display the result grid on the TrainImage in the LastRunRecord.</PARA></remarks><summary>Display the result grid on the TrainImage in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.TrainRegion"><remarks><PARA>Include the train region in the LastRunRecord.</PARA></remarks><summary>Include the train region in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.TrainImageDeepCopy"><remarks><PARA>Include the entire train image in the LastRunRecord.</PARA></remarks><summary>Include the entire train image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.InputImageByReference"><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks><summary>Include a reference to the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.None"><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolLastRunRecordDiagConstants.SearchRegion"><remarks><PARA>Include the search region in the LastRunRecord.</PARA></remarks><summary>Include the search region in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants"><summary>Enumeration of 2D Symbol symbologies.</summary><remarks><PARA>Enumeration of 2D Symbol symbologies used by <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Symbology" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants.QRCode"><remarks><PARA>QR Code (Quick Response Code) is a two-dimensional matrix symbology that has  finder patterns on three of its corners. 
</PARA><PARA><PICTURE SRC="cog2DSymbolSymbologyQRCode.gif" apiSRC="cog2DSymbolSymbologyQRCode_cog2DSymbolSymbologyQRCode.gif" /></PARA><PARA>The MicroQR code is a smaller version of QR Code that uses  only one finder pattern.</PARA><PARA><PICTURE SRC="cog2DSymbolSymbologyMicroQRCode.gif" apiSRC="cog2DSymbolSymbologyQRCode_cog2DSymbolSymbologyMicroQRCode.gif" /></PARA><PARA>
Use <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.QRCodeModel" /> to set the specific QR Code model.
</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolSymbologyConstants.DataMatrix"><remarks><PARA>Data Matrix is a 2D symbology that features a rectangular or square array of dark and white modules used to encode data. The symbol has a finder pattern, which is used to locate and orient the symbol. This pattern consists of a vertical and horizontal bar that is one module wide on the left and bottom sides of the symbol and alternate dark and light modules on the right and top </PARA><PARA><PICTURE SRC="cog2DSymbolSymbologyDataMatrix.gif" apiSRC="cog2DSymbolSymbologyDataMatrix_cog2DSymbolSymbologyDataMatrix.gif" /></PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants"><summary>Enumeration of 2D Symbol operating modes.</summary><remarks><PARA>Enumeration of 2D Symbol operating modes used by <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.OperatingMode" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants.HighlyDegradedSymbols"><remarks><PARA>Train and decode by using an algorithm that will handle highly degraded symbols.</PARA></remarks><summary>Train and decode by using an algorithm that handles highly degraded symbols.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolOperatingModeConstants.TypicalSymbols"><summary>Train and decode using an algorithm that efficiently processes symbols of typical quality.</summary><remarks><PARA>Train and decode using an algorithm that efficiently processes symbols of typical quality.</PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPerspectiveModeConstants"><summary>Enumeration of 2D Symbol Perspective Mode.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPerspectiveModeConstants.UsePattern"><summary>Use an algorithm that allows decoding of symbols that have perspective distortion if this algorithm was enabled when the pattern was trained</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPerspectiveModeConstants.Disabled"><summary>Do not use an algorithm that allows decoding of symbols that have perspective distortion.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPerspectiveModeConstants.Enabled"><summary>Use an algorithm that allows decoding of symbols that have perspective distortion.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolNonConformantModulesModeConstants"><summary>Enumeration of 2D Symbol Non-Conformant Modules Mode.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolNonConformantModulesModeConstants.UsePattern"><summary>Use an algorithm that allows decoding of symbols that have non-conformant modules if this algorithm was enabled when the pattern was trained.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolNonConformantModulesModeConstants.Disabled"><summary>Do not use an algorithm that allows decoding of symbols that have non-conformant modules.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolNonConformantModulesModeConstants.Enabled"><summary>Use an algorithm that allows decoding of symbols that have non-conformant modules.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCodePageConstants"><summary>Enumeration of 2D Symbol Code Pages. The Code Page designates which character set should be used to construct decoded symbol strings.</summary><remarks><PARA>Enumeration of 2D Symbol Code Pages used with <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DecodedStringCodePage" /> to specify  which character set should be used to construct decoded symbol strings.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCodePageConstants.SimplifiedChinese"><summary>Construct decoded strings using the Simplified Chinese Code Page (character set).</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCodePageConstants.Korean"><summary>Construct decoded strings using the Korean Code Page (character set).</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCodePageConstants.Japanese"><summary>Construct decoded strings using the Japanese Code Page (character set).</summary><remarks><PARA>Construct decoded strings using the Japanese Code Page (character set).</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolCodePageConstants.ANSILatin1"><remarks><PARA>Construct decoded strings using the ANSI (Latin 1) character set. This is the typical code page setting for ASCII encoded symbols.</PARA></remarks><summary>Construct decoded strings using the ANSI (Latin 1) character set. This is the typical code page setting for ASCII encoded symbols.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPolarityConstants"><summary>Enumeration of 2D Symbol polarities.</summary><remarks><PARA>Enumeration of 2D Symbol polarities used by <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Polarity" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPolarityConstants.LightOnDark"><remarks><PARA>The symbol is made up of light elements on a dark background.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPolarityConstants.DarkOnLight"><remarks><PARA>The symbol is made up of dark elements on a light background.</PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants"><summary>Enumeration of 2D Symbol Data Matrix ECC levels. The ECC (Error Checking and Correction) Level specifies the version of the Data Matrix symbol to be decoded.</summary><remarks><PARA>Enumeration of 2D Symbol Data Matrix ECC levels used by <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.DataMatrixECCLevel" />. The ECC (Error Checking and Correction) Level specifies the version of the Data Matrix symbol to be decoded.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants.Level200"><summary>Specifies ECC-200 encoded symbols. These symbols have an even number of data marks on each side and can be square or rectangular.</summary><remarks><PARA>Specifies ECC-200 encoded symbols. These symbols have an even number of data marks on each side and can be square or rectangular.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants.Level140"><summary>Specifies ECC-140 encoded symbols. These symbols are square and have an odd number of data marks on each side.</summary><remarks><PARA>Specifies ECC-140 encoded symbols. These symbols are square and have an odd number of data marks on each side.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants.Level100"><remarks><PARA>Specifies ECC-100 encoded symbols. These symbols are square and have an odd number of data marks on each side.</PARA></remarks><summary>Specifies ECC-100 encoded symbols. These symbols are square and have an odd number of data marks on each side.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants.Level80"><remarks><PARA>Specifies ECC-080 encoded symbols. These symbols are square and have an odd number of data marks on each side.</PARA></remarks><summary>Specifies ECC-080 encoded symbols. These symbols are square and have an odd number of data marks on each side.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants.Level50"><remarks><PARA>Specifies ECC-050 encoded symbols. These symbols are square and have an odd number of data marks on each side.</PARA></remarks><summary>Specifies ECC-050 encoded symbols. These symbols are square and have an odd number of data marks on each side.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolDataMatrixECCLevelConstants.Level0"><summary>Specifies ECC-000 encoded symbols. These symbols are square and have an odd number of data marks on each side.</summary><remarks><PARA>Specifies ECC-000 encoded symbols. These symbols are square and have an odd number of data marks on each side.</PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants"><summary>Enumeration of train flags that may be ORed together to specify which Train parameters will be generated (learned) by calling Train to produce a TrainResult object. TrainResults not generated will be copies of the initial Train parameters of the Pattern.</summary><remarks><PARA>Enumeration of train flags, used by <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainFlags" />, that may be ORed together to specify which training parameters of the pattern will be generated (learned) by calling <see cref="M:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.Train" /> to produce a <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.TrainResult" /> object. 
</PARA><PARA>Training parameters that are not generated (learned) will contain copies of the initial training parameters of the pattern.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants.All"><remarks><PARA>Training will learn all of the parameters needed to decode.</PARA></remarks><summary>Training will learn all of the parameters needed to decode.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants.NominalGrid"><remarks><PARA>Training will learn the nominal grid.</PARA></remarks><summary>Training will learn the nominal grid.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants.GridSize"><summary>Training will learn the grid size. This refers to the QRCodeGridSize or DataMatrixRows and DataMatrixColumns depending upon the symbology chosen.</summary><remarks><PARA>Training will learn the grid size. This refers to the QRCodeGridSize or DataMatrixRows and DataMatrixColumns depending upon the symbology chosen.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants.ModelOrECC"><remarks><PARA>Training will learn the ECC Level if Data Matrix is the current Symbology or Model if QR Code is the current Symbology.</PARA></remarks><summary>Training will learn the ECC Level if Data Matrix is the current Symbology or Model if QR Code is the current Symbology.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants.None"><summary>Training will not learn any of the parameters. The pattern parameters specified will become the trained parameter used to decode images.</summary><remarks><PARA>Training will not learn any of the parameters. The pattern parameters specified will become the trained parameter used to decode images.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolTrainFlagConstants.Polarity"><remarks><PARA>Training will learn the symbol polarity (light-on-dark or dark-on-light).</PARA></remarks><summary>Training will learn the symbol polarity (light-on-dark or dark-on-light).</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants"><summary>Enumeration of valid QR Code grid sizes.</summary><remarks><PARA>Enumeration of valid QR Code grid sizes used by <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.QRCodeGridSize" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size49"><summary>Specifies a 49x49 QR Code grid size.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size45"><summary>Specifies a 45x45 QR Code grid size.</summary><remarks><PARA>Specifies a 45x45 QR Code grid size.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size41"><remarks><PARA>Specifies a 41x41 QR Code grid size.</PARA></remarks><summary>Specifies a 41x41 QR Code grid size.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size37"><summary>Specifies a 37x37 QR Code grid size.</summary><remarks><PARA>Specifies a 37x37 QR Code grid size.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size33"><summary>Specifies a 33x3 QR Code grid size.</summary><remarks><PARA>Specifies a 33x3 QR Code grid size.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size29"><summary>Specifies a 29x29 QR Code grid size.</summary><remarks><PARA>Specifies a 29x29 QR Code grid size.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size25"><summary>Specifies a 25x25 QR Code grid size.</summary><remarks><PARA>Specifies a 25x25 QR Code grid size.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size21"><summary>Specifies a 21x21 QR Code grid size.</summary><remarks><PARA>Specifies a 21x21 QR Code grid size.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size17"><summary>Specifies a 17x17 Micro QR Code grid size.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size15"><summary>Specifies a 15x15 Micro QR Code grid size.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size13"><summary>Specifies a 13x13 Micro QR Code grid size.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeGridSizeConstants.Size11"><summary>Specifies an 11x11 Micro QR Code grid size.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeModelConstants"><summary>Enumeration of 2D Symbol QR Code Models. These Models designate the versions of QR Code symbols that can be decoded. Model 1 is the original version. Model 2 is the enhanced version.</summary><remarks><PARA>Enumeration of 2D Symbol QR Code Models used by <see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.QRCodeModel" />.
These Models designate the versions of QR Code symbols that can be decoded. Model 1 is the original version. Model 2 is the enhanced version.
MicroQR is the reduced size version.

</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeModelConstants.ModelMicro"><remarks><PARA>Specifies that symbols will be of the MicroQR (reduced size) version.</PARA></remarks><summary>Specifies that symbols will be of the MicroQR (reduced size) version.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeModelConstants.Model2"><summary>Specifies that symbols will be of the enhanced QR Code version.</summary><remarks><PARA>Specifies that symbols will be of the enhanced QR Code version.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolQRCodeModelConstants.Model1"><summary>Specifies that symbols will be of the original QR Code version.</summary><remarks><PARA>Specifies that symbols will be of the original QR Code version.</PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.CogPDF417CurrentRecordConstants"><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogPDF417 Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogpdf417tool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417CurrentRecordConstants.All"><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks><summary>Include all possible records in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417CurrentRecordConstants.None"><summary>Do not include any records in the CurrentRecord.</summary><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417CurrentRecordConstants.Region"><summary>Include the (interactive) region to be used for decoding in the CurrentRecord.</summary><remarks><PARA>Include the (interactive) region to be used for decoding in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417CurrentRecordConstants.InputImage"><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks><summary>Include the input image in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogPDF417 Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogpdf417tool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of non-diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordConstants.All"><remarks><PARA>Include all of the nondiagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordConstants.None"><remarks><PARA>Do not include any of the nondiagnostic data in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordDiagConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.TwoDSymbol.CogPDF417Tool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogPDF417 Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogpdf417tool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordDiagConstants.All"><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordDiagConstants.TransformedRegionImage"><summary>Generate a record containing the pixels within the region of the InputImage.</summary><remarks><PARA>Generate a record containing the pixels within the region of the InputImage.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordDiagConstants.InputImageDeepCopy"><summary>Include a deep copy of the input image in the LastRunRecord.</summary><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordDiagConstants.InputImageByReference"><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks><summary>Include a reference to the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordDiagConstants.None"><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.CogPDF417LastRunRecordDiagConstants.Region"><summary>Include the region in the LastRunRecord.</summary><remarks><PARA>Include the region in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants"><summary>Enumeration of Cog2DSymbolVerify quality grades.</summary><remarks><PARA>Enumeration of Cog2DSymbolVerify quality grades.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants.A"><summary>Quality grade A, where A=Excellent and F=Fail.</summary><remarks><PARA>Quality grade A, where A=Excellent and F=Fail.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants.B"><remarks><PARA>Quality grade B, where A=Excellent and F=Fail.</PARA></remarks><summary>Quality grade B, where A=Excellent and F=Fail.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants.C"><summary>Quality grade C, where A=Excellent and F=Fail.</summary><remarks><PARA>Quality grade C, where A=Excellent and F=Fail.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants.D"><remarks><PARA>Quality grade D, where A=Excellent and F=Fail.</PARA></remarks><summary>Quality grade D, where A=Excellent and F=Fail.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyGradeConstants.F"><remarks><PARA>Quality grade F, where A=Excellent and F=Fail.</PARA></remarks><summary>Quality grade F, where A=Excellent and F=Fail.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotGraphicConstants"><summary>Enumeration of Cog2DSymbolVerifyIAQGDot graphic options.</summary><remarks><PARA>Enumeration of Cog2DSymbolVerifyIAQGDot graphic options.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotGraphicConstants.CombinedMap"><remarks><PARA>Generate a mask graphic with a color-coded map of per-dot combined grades.</PARA></remarks><summary>Generate a mask graphic with a color-coded map of per-dot combined grades.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotGraphicConstants.ShapeMap"><remarks><PARA>Generate a mask graphic with a color-coded map of per-dot shape grades.</PARA></remarks><summary>Generate a mask graphic with a color-coded map of per-dot shape grades.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotGraphicConstants.SizeMap"><summary>Generate a mask graphic with a color-coded map of per-dot size grades.</summary><remarks><PARA>Generate a mask graphic with a color-coded map of per-dot size grades.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotGraphicConstants.LocationMap"><summary>Generate a mask graphic with a color-coded map of per-dot location grades.</summary><remarks><PARA>Generate a mask graphic with a color-coded map of per-dot location grades.</PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotContourGraphicConstants"><remarks><PARA>Enumeration of Cog2DSymbolVerifyIAQGDot contour graphic options.</PARA></remarks><summary>Enumeration of Cog2DSymbolVerifyIAQGDot contour graphic options.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotContourGraphicConstants.Combined"><summary>Generate a general contour graphic depicting color-coded per-dot combined grades.</summary><remarks><PARA>Generate a general contour graphic depicting color-coded per-dot combined grades.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotContourGraphicConstants.Shape"><summary>Generate a general contour graphic depicting color-coded per-dot shape grades.</summary><remarks><PARA>Generate a general contour graphic depicting color-coded per-dot shape grades.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotContourGraphicConstants.Location"><remarks><PARA>Generate a general contour graphic depicting color-coded per-dot location grades.</PARA></remarks><summary>Generate a general contour graphic depicting color-coded per-dot location grades.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyIAQGDotContourGraphicConstants.Size"><summary>Generate a general contour graphic depicting color-coded per-dot size grades.</summary><remarks><PARA>Generate a general contour graphic depicting color-coded per-dot size grades.</PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
Cog2DSymbolVerify Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cog2dsymboltoolverify_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be included in the tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyCurrentRecordConstants.All"><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks><summary>Include all possible records in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyCurrentRecordConstants.None"><summary>Do not include any records in the CurrentRecord.</summary><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyCurrentRecordConstants.Region"><summary>Include the (non-interactive) region to be processed in the CurrentRecord.</summary><remarks><PARA>Include the (non-interactive) region to be processed in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyCurrentRecordConstants.InputImage"><summary>Include the input image in the CurrentRecord.</summary><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
Cog2DSymbolVerify Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cog2dsymboltoolverify_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Non-Diagnostic data that can be included in the tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordConstants.All"><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordConstants.None"><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be included in the tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
Cog2DSymbolVerify Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cog2dsymboltoolverify_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.All"><summary>Include all of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.IAQGDotCombinedContour"><summary>Generate a record containing a contour graphic depicting color-coded per-dot combined grades.</summary><remarks><PARA>Generate a record containing a contour graphic depicting color-coded per-dot combined grades.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.IAQGDotShapeContour"><remarks><PARA>Generate a record containing a contour graphic depicting color-coded map of per-dot shape grades.</PARA></remarks><summary>Generate a record containing a contour graphic depicting color-coded map of per-dot shape grades.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.IAQGDotSizeContour"><remarks><PARA>Generate a record containing a contour graphic depicting color-coded per-dot size grades.</PARA></remarks><summary>Generate a record containing a contour graphic depicting color-coded per-dot size grades.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.IAQGDotLocationContour"><summary>Generate a record containing a contour graphic depicting color-coded per-dot location grades.</summary><remarks><PARA>Generate a record containing a contour graphic depicting color-coded per-dot location grades.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.IAQGDotCombinedMap"><summary>Generate a record containing a mask graphic with a color-coded map of per-dot combined grades.</summary><remarks><PARA>Generate a record containing a mask graphic with a color-coded map of per-dot combined grades.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.IAQGDotShapeMap"><summary>Generate a record containing a mask graphic with a color-coded map of per-dot shape grades.</summary><remarks><PARA>Generate a record containing a mask graphic with a color-coded map of per-dot shape grades.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.IAQGDotSizeMap"><remarks><PARA>Generate a record containing a mask graphic with a color-coded map of per-dot size grades.</PARA></remarks><summary>Generate a record containing a mask graphic with a color-coded map of per-dot size grades.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.IAQGDotLocationMap"><remarks><PARA>Generate a record containing a mask graphic with a color-coded map of per-dot location grades.</PARA></remarks><summary>Generate a record containing a mask graphic with a color-coded map of per-dot location grades.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.None"><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerifyLastRunRecordDiagConstants.Region"><remarks><PARA>Generate a record containing the Region.</PARA></remarks><summary>Generate a record containing the Region.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolPattern.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolRunParams.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.Cog2DSymbolVerify.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.TwoDSymbol.CogPDF417.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member></members></doc>